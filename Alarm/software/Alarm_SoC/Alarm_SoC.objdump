
Alarm_SoC.elf:     file format elf32-littlenios2
Alarm_SoC.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020180

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00001710 memsz 0x00001710 flags r-x
    LOAD off    0x00003000 vaddr 0x00040000 paddr 0x00021730 align 2**12
         filesz 0x000001ec memsz 0x00000344 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000015b0  00020180  00020180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00040000  00021730  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001b8  00040034  00021764  00003034  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  000401ec  0002191c  000031ec  2**2
                  ALLOC, SMALL_DATA
  6 .ROM          00000000  0002191c  0002191c  000031ec  2**0
                  CONTENTS
  7 .RAM          00000000  00040344  00040344  000031ec  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000478  00000000  00000000  00003210  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000058c8  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fde  00000000  00000000  00008f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000022b5  00000000  00000000  0000af2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000006b8  00000000  00000000  0000d1e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b9d  00000000  00000000  0000d89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001c2a  00000000  00000000  0000f439  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00011064  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000308  00000000  00000000  000110a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00012de2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00012de5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00012de8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00012de9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00012dea  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00012dee  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00012df2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  00012df6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  00012dfa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  00012dfe  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000005  00000000  00000000  00012e02  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004b  00000000  00000000  00012e07  2**0
                  CONTENTS, READONLY
 30 .jdi          00003f66  00000000  00000000  00012e52  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00072174  00000000  00000000  00016db8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020180 l    d  .text	00000000 .text
00040000 l    d  .rodata	00000000 .rodata
00040034 l    d  .rwdata	00000000 .rwdata
000401ec l    d  .bss	00000000 .bss
0002191c l    d  .ROM	00000000 .ROM
00040344 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Alarm_SoC_bsp//obj/HAL/src/crt0.o
000201b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0004000e l     O .rodata	0000000c CSWTCH.19
00020334 l     F .text	00000020 HandlerTimerCoreInterrupt
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020828 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00040034 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00040114 l     O .rwdata	0000002c UART
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00021598 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00040208 g     O .bss	00000004 alt_instruction_exception_handler
000212b8 g     F .text	0000002c alt_main
00040244 g     O .bss	00000100 alt_irq
00020224 g     F .text	00000110 UpdateTime
00021764 g       *ABS*	00000000 __flash_rwdata_start
000207dc g     F .text	0000004c printf
000401f2 g     O .bss	00000001 switchingAlarm
0002146c g     F .text	00000070 alt_up_rs232_read_fd
0004020c g     O .bss	0000001c alarmTime
000201bc g     F .text	00000028 ToHexa
000216f8 g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000401f4 g     O .bss	00000004 errno
00040200 g     O .bss	00000004 alt_argv
00048198 g       *ABS*	00000000 _gp
000212e4 g     F .text	00000004 usleep
00040140 g     O .rwdata	00000030 alt_fd_list
0002160c g     F .text	00000074 alt_find_dev
00021420 g     F .text	0000004c alt_up_rs232_read_data
00021684 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000207a0 g     F .text	0000003c _printf_r
00021000 g     F .text	00000064 .hidden __udivsi3
000401f0 g     O .bss	00000001 alarmStatus
000401d4 g     O .rwdata	00000004 alt_max_fd
00021400 g     F .text	0000000c alt_up_rs232_check_parity
000401a4 g     O .rwdata	00000004 timerCoreStatus
000401c4 g     O .rwdata	00000004 _global_impure_ptr
00040344 g       *ABS*	00000000 __bss_end
00021170 g     F .text	00000068 alt_iic_isr_register
00020000 g       *ABS*	00000000 __alt_mem_ROM
00021158 g     F .text	00000018 alt_ic_irq_enabled
000401f8 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	00000060 alt_irq_handler
00040170 g     O .rwdata	00000028 alt_dev_null
00021594 g     F .text	00000004 alt_dcache_flush_all
0004019c g     O .rwdata	00000004 ledsValue
000401ec g       *ABS*	00000000 __ram_rwdata_end
000401d8 g     O .rwdata	00000008 alt_dev_list
000212e8 g     F .text	00000060 write
00040034 g       *ABS*	00000000 __ram_rodata_end
000214dc g     F .text	00000028 alt_up_rs232_write_fd
00021064 g     F .text	00000058 .hidden __umodsi3
00040344 g       *ABS*	00000000 end
000401a8 g     O .rwdata	00000004 leds
0002015c g     F .exceptions	00000024 alt_instruction_exception_entry
000401b4 g     O .rwdata	00000004 switches
00048000 g       *ABS*	00000000 __alt_stack_pointer
00021378 g     F .text	00000034 altera_avalon_jtag_uart_write
00020894 g     F .text	0000052c ___vfprintf_internal_r
00020180 g     F .text	0000003c _start
00021368 g     F .text	00000010 alt_sys_init
000213f0 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
000401ac g     O .rwdata	00000004 gpioOut
000210bc g     F .text	00000028 .hidden __mulsi3
00040034 g       *ABS*	00000000 __ram_rwdata_start
00040000 g       *ABS*	00000000 __ram_rodata_start
0002150c g     F .text	00000088 alt_busy_sleep
00021700 g     F .text	00000030 memcmp
00040344 g       *ABS*	00000000 __alt_stack_base
000401ec g     O .bss	00000004 counter
000201e4 g     F .text	00000040 EncodeHexa
000213c4 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
000215a0 g     F .text	0000006c alt_dev_llist_insert
00020ddc g     F .text	000000b8 __sfvwrite_small_dev
000401ec g       *ABS*	00000000 __bss_start
00020440 g     F .text	00000360 main
00040000 g       *ABS*	00000000 __alt_mem_RAM
000401fc g     O .bss	00000004 alt_envp
000401b0 g     O .rwdata	00000004 buttons
000401d0 g     O .rwdata	00000004 JTAG
000401e8 g     O .rwdata	00000004 alt_errno
000401c0 g     O .rwdata	00000004 seconds
00020f08 g     F .text	00000084 .hidden __divsi3
00021730 g       *ABS*	00000000 __flash_rodata_start
00021504 g     F .text	00000008 alt_up_rs232_open_dev
00021348 g     F .text	00000020 alt_irq_init
00020eb0 g     F .text	00000058 _write_r
000401c8 g     O .rwdata	00000004 _impure_ptr
00040204 g     O .bss	00000004 alt_argc
00020020 g       .exceptions	00000000 alt_irq_entry
000401e0 g     O .rwdata	00000008 alt_fs_list
00020354 g     F .text	000000cc UpdateTimeDisplays
00020420 g     F .text	00000020 LedsUpdate
000213ac g     F .text	00000018 alt_up_rs232_enable_read_interrupt
0002140c g     F .text	00000014 alt_up_rs232_write_data
00020020 g       *ABS*	00000000 __ram_exceptions_start
000210e4 g     F .text	00000004 alt_ic_isr_register
000401ec g       *ABS*	00000000 _edata
00040344 g       *ABS*	00000000 _end
00020180 g       *ABS*	00000000 __ram_exceptions_end
00040228 g     O .bss	0000001c actualTime
00021120 g     F .text	00000038 alt_ic_irq_disable
00020f8c g     F .text	00000074 .hidden __modsi3
00048000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000401a0 g     O .rwdata	00000004 uart
0002000c g       .entry	00000000 _exit
000401bc g     O .rwdata	00000004 minutes
00020e94 g     F .text	0000001c strlen
00021680 g     F .text	00000004 alt_icache_flush_all
000401b8 g     O .rwdata	00000004 hours
000401cc g     O .rwdata	00000004 alt_priority_mask
000210e8 g     F .text	00000038 alt_ic_irq_enable
00020dc0 g     F .text	0000001c __vfprintf_internal
000401f1 g     O .bss	00000001 settingAlarm
000213e0 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
000211d8 g     F .text	000000e0 alt_load
00040198 g     O .rwdata	00000004 ledsOn



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406014 	ori	at,at,384
    jmp r1
   20008:	0800683a 	jmp	at

0002000c <_exit>:
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	002015c0 	call	2015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defffe04 	addi	sp,sp,-8
   20100:	dfc00115 	stw	ra,4(sp)
   20104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2010c:	04000134 	movhi	r16,4
   20110:	84009104 	addi	r16,r16,580

  active = alt_irq_pending ();

  do
  {
    i = 0;
   20114:	0005883a 	mov	r2,zero
    mask = 1;
   20118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2011c:	20ca703a 	and	r5,r4,r3
   20120:	28000b26 	beq	r5,zero,20150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   20124:	100490fa 	slli	r2,r2,3
   20128:	8085883a 	add	r2,r16,r2
   2012c:	10c00017 	ldw	r3,0(r2)
   20130:	11000117 	ldw	r4,4(r2)
   20134:	183ee83a 	callr	r3
   20138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   2013c:	203ff51e 	bne	r4,zero,20114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   20140:	dfc00117 	ldw	ra,4(sp)
   20144:	dc000017 	ldw	r16,0(sp)
   20148:	dec00204 	addi	sp,sp,8
   2014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20150:	18c7883a 	add	r3,r3,r3
      i++;
   20154:	10800044 	addi	r2,r2,1

    } while (1);
   20158:	003ff006 	br	2011c <alt_irq_handler+0x20>

0002015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   2015c:	d0a01c17 	ldw	r2,-32656(gp)
   20160:	10000426 	beq	r2,zero,20174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20164:	200b883a 	mov	r5,r4
   20168:	000d883a 	mov	r6,zero
   2016c:	013fffc4 	movi	r4,-1
   20170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   20178:	0005883a 	mov	r2,zero
   2017c:	f800283a 	ret

Disassembly of section .text:

00020180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20180:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20184:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   20188:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   2018c:	d6a06614 	ori	gp,gp,33176
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20190:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   20194:	10807b14 	ori	r2,r2,492

    movhi r3, %hi(__bss_end)
   20198:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   2019c:	18c0d114 	ori	r3,r3,836

    beq r2, r3, 1f
   201a0:	10c00326 	beq	r2,r3,201b0 <_start+0x30>

0:
    stw zero, (r2)
   201a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201ac:	10fffd36 	bltu	r2,r3,201a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201b0:	00211d80 	call	211d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201b4:	00212b80 	call	212b8 <alt_main>

000201b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201b8:	003fff06 	br	201b8 <alt_after_alt_main>

000201bc <ToHexa>:
int counter = 0;

/**
 * Converts a integer value to 7 segment display format
 */
int ToHexa(int value) {
   201bc:	213fffc4 	addi	r4,r4,-1
   201c0:	008002c4 	movi	r2,11
   201c4:	11000536 	bltu	r2,r4,201dc <ToHexa+0x20>
   201c8:	00800134 	movhi	r2,4
   201cc:	10800384 	addi	r2,r2,14
   201d0:	1109883a 	add	r4,r2,r4
   201d4:	20800003 	ldbu	r2,0(r4)
   201d8:	f800283a 	ret
	switch (value) {
   201dc:	00801004 	movi	r2,64
	case 12:
		return OFF;
	default:
		return ZERO;
	}
}
   201e0:	f800283a 	ret

000201e4 <EncodeHexa>:

/**
 * Takes 2 values and encoded them to be set it in the 7 segments displays
 */
int EncodeHexa(int hex1, int hex0) {
   201e4:	defffd04 	addi	sp,sp,-12
   201e8:	dfc00215 	stw	ra,8(sp)
   201ec:	dc400115 	stw	r17,4(sp)
   201f0:	dc000015 	stw	r16,0(sp)
   201f4:	2823883a 	mov	r17,r5
	return (ToHexa(hex1) << 8) | (ToHexa(hex0));
   201f8:	00201bc0 	call	201bc <ToHexa>
   201fc:	1021883a 	mov	r16,r2
   20200:	8020923a 	slli	r16,r16,8
   20204:	8809883a 	mov	r4,r17
   20208:	00201bc0 	call	201bc <ToHexa>
}
   2020c:	8084b03a 	or	r2,r16,r2
   20210:	dfc00217 	ldw	ra,8(sp)
   20214:	dc400117 	ldw	r17,4(sp)
   20218:	dc000017 	ldw	r16,0(sp)
   2021c:	dec00304 	addi	sp,sp,12
   20220:	f800283a 	ret

00020224 <UpdateTime>:

/**
 * Update the hour
 */
void UpdateTime(void) {
	if (actualTime.secUnits >= 9) {
   20224:	00800134 	movhi	r2,4
   20228:	10808a04 	addi	r2,r2,552
   2022c:	10c00417 	ldw	r3,16(r2)
   20230:	01000204 	movi	r4,8
   20234:	20c0050e 	bge	r4,r3,2024c <UpdateTime+0x28>
		actualTime.secTens++;
   20238:	10c00517 	ldw	r3,20(r2)
		actualTime.secUnits = 0x0;
   2023c:	10000415 	stw	zero,16(r2)
/**
 * Update the hour
 */
void UpdateTime(void) {
	if (actualTime.secUnits >= 9) {
		actualTime.secTens++;
   20240:	18c00044 	addi	r3,r3,1
   20244:	10c00515 	stw	r3,20(r2)
   20248:	00000206 	br	20254 <UpdateTime+0x30>
		actualTime.secUnits = 0x0;
	}
	else{
		actualTime.secUnits++;
   2024c:	18c00044 	addi	r3,r3,1
   20250:	10c00415 	stw	r3,16(r2)
	}

	if (actualTime.secTens >= 6) {
   20254:	11000517 	ldw	r4,20(r2)
   20258:	00c00134 	movhi	r3,4
   2025c:	01400144 	movi	r5,5
   20260:	18c08a04 	addi	r3,r3,552
   20264:	2900040e 	bge	r5,r4,20278 <UpdateTime+0x54>
		actualTime.secUnits++;
   20268:	19000417 	ldw	r4,16(r3)
		actualTime.secTens = 0x0;
   2026c:	18000515 	stw	zero,20(r3)
	else{
		actualTime.secUnits++;
	}

	if (actualTime.secTens >= 6) {
		actualTime.secUnits++;
   20270:	21000044 	addi	r4,r4,1
   20274:	19000415 	stw	r4,16(r3)
		actualTime.secTens = 0x0;
	}

	if (actualTime.seconds >= 60) { //45
   20278:	11000617 	ldw	r4,24(r2)
   2027c:	00c00134 	movhi	r3,4
   20280:	01400ec4 	movi	r5,59
   20284:	18c08a04 	addi	r3,r3,552
   20288:	2900040e 	bge	r5,r4,2029c <UpdateTime+0x78>
		actualTime.minUnits++;
   2028c:	19000317 	ldw	r4,12(r3)
		actualTime.seconds = 0x0;
   20290:	18000615 	stw	zero,24(r3)
		actualTime.secUnits++;
		actualTime.secTens = 0x0;
	}

	if (actualTime.seconds >= 60) { //45
		actualTime.minUnits++;
   20294:	21000044 	addi	r4,r4,1
   20298:	19000315 	stw	r4,12(r3)
		actualTime.seconds = 0x0;
	}

	if (actualTime.minUnits >= 10) {
   2029c:	11000317 	ldw	r4,12(r2)
   202a0:	00c00134 	movhi	r3,4
   202a4:	01400244 	movi	r5,9
   202a8:	18c08a04 	addi	r3,r3,552
   202ac:	2900040e 	bge	r5,r4,202c0 <UpdateTime+0x9c>
		actualTime.minTens++;
   202b0:	19000217 	ldw	r4,8(r3)
		actualTime.minUnits = 0x0;
   202b4:	18000315 	stw	zero,12(r3)
		actualTime.minUnits++;
		actualTime.seconds = 0x0;
	}

	if (actualTime.minUnits >= 10) {
		actualTime.minTens++;
   202b8:	21000044 	addi	r4,r4,1
   202bc:	19000215 	stw	r4,8(r3)
		actualTime.minUnits = 0x0;

	}

	if (actualTime.minTens >= 6) {
   202c0:	11000217 	ldw	r4,8(r2)
   202c4:	00c00134 	movhi	r3,4
   202c8:	01400144 	movi	r5,5
   202cc:	18c08a04 	addi	r3,r3,552
   202d0:	2900040e 	bge	r5,r4,202e4 <UpdateTime+0xc0>
		actualTime.hourUnits++;
   202d4:	19000117 	ldw	r4,4(r3)
		actualTime.minTens = 0x0;
   202d8:	18000215 	stw	zero,8(r3)
		actualTime.minUnits = 0x0;

	}

	if (actualTime.minTens >= 6) {
		actualTime.hourUnits++;
   202dc:	21000044 	addi	r4,r4,1
   202e0:	19000115 	stw	r4,4(r3)
		actualTime.minTens = 0x0;

	}

	if (actualTime.hourUnits >= 10) {
   202e4:	11000117 	ldw	r4,4(r2)
   202e8:	00c00134 	movhi	r3,4
   202ec:	01400244 	movi	r5,9
   202f0:	18c08a04 	addi	r3,r3,552
   202f4:	2900040e 	bge	r5,r4,20308 <UpdateTime+0xe4>
		actualTime.hourTens++;
   202f8:	19000017 	ldw	r4,0(r3)
		actualTime.hourUnits = 0x0;
   202fc:	18000115 	stw	zero,4(r3)
		actualTime.minTens = 0x0;

	}

	if (actualTime.hourUnits >= 10) {
		actualTime.hourTens++;
   20300:	21000044 	addi	r4,r4,1
   20304:	19000015 	stw	r4,0(r3)
		actualTime.hourUnits = 0x0;

	}

	if (actualTime.hourTens >= 2 && actualTime.hourUnits >= 4) {
   20308:	10800017 	ldw	r2,0(r2)
   2030c:	00c00134 	movhi	r3,4
   20310:	01000044 	movi	r4,1
   20314:	18c08a04 	addi	r3,r3,552
   20318:	2080050e 	bge	r4,r2,20330 <UpdateTime+0x10c>
   2031c:	18800117 	ldw	r2,4(r3)
   20320:	010000c4 	movi	r4,3
   20324:	2080020e 	bge	r4,r2,20330 <UpdateTime+0x10c>
		actualTime.hourTens = 0x0;
   20328:	18000015 	stw	zero,0(r3)
		actualTime.hourUnits = 0x0;
   2032c:	18000115 	stw	zero,4(r3)
   20330:	f800283a 	ret

00020334 <HandlerTimerCoreInterrupt>:

/**
 * Handler for the Timer Core interruptions
 */
static void HandlerTimerCoreInterrupt(void* context) {
	*timerCoreStatus = 0; // Resets the status
   20334:	d0a00317 	ldw	r2,-32756(gp)
	actualTime.seconds++;
   20338:	00c00134 	movhi	r3,4
   2033c:	18c08a04 	addi	r3,r3,552

/**
 * Handler for the Timer Core interruptions
 */
static void HandlerTimerCoreInterrupt(void* context) {
	*timerCoreStatus = 0; // Resets the status
   20340:	10000005 	stb	zero,0(r2)
	actualTime.seconds++;
   20344:	18800617 	ldw	r2,24(r3)
   20348:	10800044 	addi	r2,r2,1
   2034c:	18800615 	stw	r2,24(r3)
	UpdateTime();
   20350:	00202241 	jmpi	20224 <UpdateTime>

00020354 <UpdateTimeDisplays>:

/*
 * Refresh the time on the displays
 */
void UpdateTimeDisplays(void) {
	if (settingAlarm) {
   20354:	d0a01643 	ldbu	r2,-32679(gp)
}

/*
 * Refresh the time on the displays
 */
void UpdateTimeDisplays(void) {
   20358:	defffb04 	addi	sp,sp,-20
   2035c:	dc800215 	stw	r18,8(sp)
   20360:	dc400115 	stw	r17,4(sp)
   20364:	dfc00415 	stw	ra,16(sp)
   20368:	dcc00315 	stw	r19,12(sp)
   2036c:	dc000015 	stw	r16,0(sp)
   20370:	d4a00917 	ldw	r18,-32732(gp)
   20374:	d4600817 	ldw	r17,-32736(gp)
	if (settingAlarm) {
   20378:	10000326 	beq	r2,zero,20388 <UpdateTimeDisplays+0x34>
		//*seconds	= EncodeHexa(alarmTime.hourTens, alarmTime.hourUnits, alarmTime.minTens, alarmTime.minUnits);
		*minutes	= EncodeHexa(alarmTime.minTens, alarmTime.minUnits);
   2037c:	04000134 	movhi	r16,4
   20380:	84008304 	addi	r16,r16,524
   20384:	00001706 	br	203e4 <UpdateTimeDisplays+0x90>
		*hours		= EncodeHexa(alarmTime.hourTens, alarmTime.hourUnits);
	} else if (switchingAlarm) {
   20388:	d0a01683 	ldbu	r2,-32678(gp)
   2038c:	10000e26 	beq	r2,zero,203c8 <UpdateTimeDisplays+0x74>
		if (alarmStatus) {
   20390:	d0a01603 	ldbu	r2,-32680(gp)
   20394:	10000526 	beq	r2,zero,203ac <UpdateTimeDisplays+0x58>
			// Put ON on the displays
			*minutes = EncodeHexa(12, 12);
   20398:	01400304 	movi	r5,12
   2039c:	2809883a 	mov	r4,r5
   203a0:	00201e40 	call	201e4 <EncodeHexa>
   203a4:	90800015 	stw	r2,0(r18)
   203a8:	00001506 	br	20400 <UpdateTimeDisplays+0xac>
			*hours = EncodeHexa(12, 12);

		} else {
			// Put OFF on the displays
			*minutes = EncodeHexa(12, 0);
   203ac:	000b883a 	mov	r5,zero
   203b0:	01000304 	movi	r4,12
   203b4:	00201e40 	call	201e4 <EncodeHexa>
			*hours = EncodeHexa(12, 12);
   203b8:	01400304 	movi	r5,12
			*minutes = EncodeHexa(12, 12);
			*hours = EncodeHexa(12, 12);

		} else {
			// Put OFF on the displays
			*minutes = EncodeHexa(12, 0);
   203bc:	90800015 	stw	r2,0(r18)
			*hours = EncodeHexa(12, 12);
   203c0:	2809883a 	mov	r4,r5
   203c4:	00000d06 	br	203fc <UpdateTimeDisplays+0xa8>

		}

	} else {
		*seconds	= EncodeHexa(actualTime.secTens, actualTime.secUnits);
   203c8:	04000134 	movhi	r16,4
   203cc:	84008a04 	addi	r16,r16,552
   203d0:	81400417 	ldw	r5,16(r16)
   203d4:	81000517 	ldw	r4,20(r16)
   203d8:	d4e00a17 	ldw	r19,-32728(gp)
   203dc:	00201e40 	call	201e4 <EncodeHexa>
   203e0:	98800015 	stw	r2,0(r19)
		*minutes	= EncodeHexa(actualTime.minTens, actualTime.minUnits);
   203e4:	81400317 	ldw	r5,12(r16)
   203e8:	81000217 	ldw	r4,8(r16)
   203ec:	00201e40 	call	201e4 <EncodeHexa>
   203f0:	90800015 	stw	r2,0(r18)
		*hours		= EncodeHexa(actualTime.hourTens, actualTime.hourUnits);
   203f4:	81400117 	ldw	r5,4(r16)
   203f8:	81000017 	ldw	r4,0(r16)
   203fc:	00201e40 	call	201e4 <EncodeHexa>
   20400:	88800015 	stw	r2,0(r17)

	}
}
   20404:	dfc00417 	ldw	ra,16(sp)
   20408:	dcc00317 	ldw	r19,12(sp)
   2040c:	dc800217 	ldw	r18,8(sp)
   20410:	dc400117 	ldw	r17,4(sp)
   20414:	dc000017 	ldw	r16,0(sp)
   20418:	dec00504 	addi	sp,sp,20
   2041c:	f800283a 	ret

00020420 <LedsUpdate>:

/**
 * Animates the alarm notification
 */
void LedsUpdate(void) {
	if (*leds) {
   20420:	d0a00417 	ldw	r2,-32752(gp)
   20424:	10c00017 	ldw	r3,0(r2)
   20428:	18000226 	beq	r3,zero,20434 <LedsUpdate+0x14>
		*leds = 0b0000000000;
   2042c:	10000015 	stw	zero,0(r2)
   20430:	f800283a 	ret

	} else {
		*leds = ledsOn;
   20434:	d0e00017 	ldw	r3,-32768(gp)
   20438:	10c00015 	stw	r3,0(r2)
   2043c:	f800283a 	ret

00020440 <main>:

/**
 * Main function of the clock
 */
int main() {
	*gpioOut = 0x00;
   20440:	d0a00517 	ldw	r2,-32748(gp)
}

/**
 * Main function of the clock
 */
int main() {
   20444:	defffa04 	addi	sp,sp,-24
   20448:	dc800315 	stw	r18,12(sp)
   2044c:	dc400215 	stw	r17,8(sp)
   20450:	dc000115 	stw	r16,4(sp)
   20454:	dfc00515 	stw	ra,20(sp)
   20458:	dcc00415 	stw	r19,16(sp)
	*gpioOut = 0x00;
   2045c:	10000015 	stw	zero,0(r2)
	uchar *timerCoreMask = (uchar *) (TIMERCORE_BASE + 0x8);
	uchar *timerCoreEdgeCap = (uchar *) (TIMERCORE_BASE + 0xC);

	// Sets the interrupt handler
	//alt_irq_register(TIMERCORE_IRQ,NULL, HandlerTimerCoreInterrupt);
	alt_ic_isr_register(TIMERCORE_IRQ_INTERRUPT_CONTROLLER_ID, TIMERCORE_IRQ, HandlerTimerCoreInterrupt, NULL, 0x0);
   20460:	018000b4 	movhi	r6,2
   20464:	d8000015 	stw	zero,0(sp)
   20468:	000f883a 	mov	r7,zero
   2046c:	3180cd04 	addi	r6,r6,820
   20470:	01400044 	movi	r5,1
   20474:	0009883a 	mov	r4,zero
   20478:	00210e40 	call	210e4 <alt_ic_isr_register>
	// Starts the timer
	*timerCoreMask = 0x0;
   2047c:	00800174 	movhi	r2,5
   20480:	10a40a04 	addi	r2,r2,-28632
   20484:	10000005 	stb	zero,0(r2)
	*timerCoreEdgeCap = 0x4;
   20488:	00800174 	movhi	r2,5
   2048c:	00c00104 	movi	r3,4
   20490:	10a40b04 	addi	r2,r2,-28628
   20494:	10c00005 	stb	r3,0(r2)
	*timerCoreControl = 0x0007;
   20498:	00800174 	movhi	r2,5
   2049c:	10a40904 	addi	r2,r2,-28636
   204a0:	00c001c4 	movi	r3,7
   204a4:	10c00005 	stb	r3,0(r2)
	*timerCoreStatus = 0;
   204a8:	d0a00317 	ldw	r2,-32756(gp)
			usleep(150000); // To avoid multiples changes

		} else {

			if (alarmStatus) {
				if (alarmTime.hourTens == actualTime.hourTens
   204ac:	04000134 	movhi	r16,4
   204b0:	04400134 	movhi	r17,4
	alt_ic_isr_register(TIMERCORE_IRQ_INTERRUPT_CONTROLLER_ID, TIMERCORE_IRQ, HandlerTimerCoreInterrupt, NULL, 0x0);
	// Starts the timer
	*timerCoreMask = 0x0;
	*timerCoreEdgeCap = 0x4;
	*timerCoreControl = 0x0007;
	*timerCoreStatus = 0;
   204b4:	10000005 	stb	zero,0(r2)
 * Main function of the clock
 */
int main() {
	*gpioOut = 0x00;
	SetupTimerCore();
	*leds = 0x0;
   204b8:	d0a00417 	ldw	r2,-32752(gp)

	while (1) {
		if (*switches == 0x1) {
   204bc:	04800044 	movi	r18,1
			usleep(150000); // To avoid multiples changes

		} else {

			if (alarmStatus) {
				if (alarmTime.hourTens == actualTime.hourTens
   204c0:	84008304 	addi	r16,r16,524
 * Main function of the clock
 */
int main() {
	*gpioOut = 0x00;
	SetupTimerCore();
	*leds = 0x0;
   204c4:	10000015 	stw	zero,0(r2)
			usleep(150000); // To avoid multiples changes

		} else {

			if (alarmStatus) {
				if (alarmTime.hourTens == actualTime.hourTens
   204c8:	8c408a04 	addi	r17,r17,552
	*gpioOut = 0x00;
	SetupTimerCore();
	*leds = 0x0;

	while (1) {
		if (*switches == 0x1) {
   204cc:	d0a00717 	ldw	r2,-32740(gp)
   204d0:	10c00017 	ldw	r3,0(r2)
   204d4:	1c80301e 	bne	r3,r18,20598 <main+0x158>
			*leds = 0x1;
   204d8:	d0a00417 	ldw	r2,-32752(gp)
			if (*buttons == 0x7) {
   204dc:	d0e00617 	ldw	r3,-32744(gp)
   204e0:	010001c4 	movi	r4,7
	SetupTimerCore();
	*leds = 0x0;

	while (1) {
		if (*switches == 0x1) {
			*leds = 0x1;
   204e4:	14800015 	stw	r18,0(r2)
			if (*buttons == 0x7) {
   204e8:	19400017 	ldw	r5,0(r3)
   204ec:	2900051e 	bne	r5,r4,20504 <main+0xc4>
				actualTime.hourUnits++;
   204f0:	88c00117 	ldw	r3,4(r17)
   204f4:	18c00044 	addi	r3,r3,1
   204f8:	88c00115 	stw	r3,4(r17)
				*leds = 0x10000;
   204fc:	00c00074 	movhi	r3,1
   20500:	00000706 	br	20520 <main+0xe0>

			} else if (*buttons == 0xB) {
   20504:	19000017 	ldw	r4,0(r3)
   20508:	00c002c4 	movi	r3,11
   2050c:	20c0051e 	bne	r4,r3,20524 <main+0xe4>
				actualTime.minUnits++;
   20510:	88c00317 	ldw	r3,12(r17)
   20514:	18c00044 	addi	r3,r3,1
   20518:	88c00315 	stw	r3,12(r17)
				*leds = 0x01000;
   2051c:	00c40004 	movi	r3,4096
   20520:	10c00015 	stw	r3,0(r2)
			}

			if (actualTime.minUnits >= 10) {
   20524:	88800317 	ldw	r2,12(r17)
   20528:	00c00244 	movi	r3,9
   2052c:	1880040e 	bge	r3,r2,20540 <main+0x100>
				actualTime.minTens++;
   20530:	88800217 	ldw	r2,8(r17)
				actualTime.minUnits = 0x0;
   20534:	88000315 	stw	zero,12(r17)
				actualTime.minUnits++;
				*leds = 0x01000;
			}

			if (actualTime.minUnits >= 10) {
				actualTime.minTens++;
   20538:	10800044 	addi	r2,r2,1
   2053c:	88800215 	stw	r2,8(r17)
				actualTime.minUnits = 0x0;
			}

			if (actualTime.minTens >= 6) {
   20540:	88800217 	ldw	r2,8(r17)
   20544:	00c00144 	movi	r3,5
   20548:	1880010e 	bge	r3,r2,20550 <main+0x110>
				actualTime.minTens = 0x0;
   2054c:	88000215 	stw	zero,8(r17)
			}

			if (actualTime.hourUnits >= 10) {
   20550:	88800117 	ldw	r2,4(r17)
   20554:	00c00244 	movi	r3,9
   20558:	1880040e 	bge	r3,r2,2056c <main+0x12c>
				actualTime.hourTens++;
   2055c:	88800017 	ldw	r2,0(r17)
				actualTime.hourUnits = 0x0;
   20560:	88000115 	stw	zero,4(r17)
			if (actualTime.minTens >= 6) {
				actualTime.minTens = 0x0;
			}

			if (actualTime.hourUnits >= 10) {
				actualTime.hourTens++;
   20564:	10800044 	addi	r2,r2,1
   20568:	88800015 	stw	r2,0(r17)
				actualTime.hourUnits = 0x0;
			}

			if (actualTime.hourTens >= 2 && actualTime.hourUnits >= 4) {
   2056c:	88800017 	ldw	r2,0(r17)
   20570:	9080050e 	bge	r18,r2,20588 <main+0x148>
   20574:	88800117 	ldw	r2,4(r17)
   20578:	00c000c4 	movi	r3,3
   2057c:	1880020e 	bge	r3,r2,20588 <main+0x148>
				actualTime.hourTens = 0x0;
   20580:	88000015 	stw	zero,0(r17)
				actualTime.hourUnits = 0x0;
   20584:	88000115 	stw	zero,4(r17)
			}
			usleep(150000); // To avoid multiples increments
   20588:	010000b4 	movhi	r4,2
   2058c:	21127c04 	addi	r4,r4,18928
   20590:	00212e40 	call	212e4 <usleep>
   20594:	00007606 	br	20770 <main+0x330>

		} else if (*switches == 0x2) {
   20598:	10c00017 	ldw	r3,0(r2)
   2059c:	01000084 	movi	r4,2
   205a0:	1900301e 	bne	r3,r4,20664 <main+0x224>
			*leds = 0x2;
   205a4:	d0a00417 	ldw	r2,-32752(gp)
			*seconds	= EncodeHexa(0x10000000, 0x10000000);
   205a8:	01440034 	movhi	r5,4096
   205ac:	d4e00a17 	ldw	r19,-32728(gp)
				actualTime.hourUnits = 0x0;
			}
			usleep(150000); // To avoid multiples increments

		} else if (*switches == 0x2) {
			*leds = 0x2;
   205b0:	10c00015 	stw	r3,0(r2)
			*seconds	= EncodeHexa(0x10000000, 0x10000000);
   205b4:	2809883a 	mov	r4,r5
   205b8:	00201e40 	call	201e4 <EncodeHexa>
   205bc:	98800015 	stw	r2,0(r19)
			settingAlarm = true;
			if (*buttons == 0x7) {
   205c0:	d0a00617 	ldw	r2,-32744(gp)
			usleep(150000); // To avoid multiples increments

		} else if (*switches == 0x2) {
			*leds = 0x2;
			*seconds	= EncodeHexa(0x10000000, 0x10000000);
			settingAlarm = true;
   205c4:	d4a01645 	stb	r18,-32679(gp)
			if (*buttons == 0x7) {
   205c8:	00c001c4 	movi	r3,7
   205cc:	11000017 	ldw	r4,0(r2)
   205d0:	20c0041e 	bne	r4,r3,205e4 <main+0x1a4>
				alarmTime.hourUnits++;
   205d4:	80800117 	ldw	r2,4(r16)
   205d8:	10800044 	addi	r2,r2,1
   205dc:	80800115 	stw	r2,4(r16)
   205e0:	00000606 	br	205fc <main+0x1bc>

			} else if (*buttons == 0xB) {
   205e4:	10c00017 	ldw	r3,0(r2)
   205e8:	008002c4 	movi	r2,11
   205ec:	1880031e 	bne	r3,r2,205fc <main+0x1bc>
				alarmTime.minUnits++;
   205f0:	80800317 	ldw	r2,12(r16)
   205f4:	10800044 	addi	r2,r2,1
   205f8:	80800315 	stw	r2,12(r16)

			}

			if (alarmTime.minUnits >= 10) {
   205fc:	80800317 	ldw	r2,12(r16)
   20600:	00c00244 	movi	r3,9
   20604:	1880040e 	bge	r3,r2,20618 <main+0x1d8>
				alarmTime.minTens++;
   20608:	80800217 	ldw	r2,8(r16)
				alarmTime.minUnits = 0x0;
   2060c:	80000315 	stw	zero,12(r16)
				alarmTime.minUnits++;

			}

			if (alarmTime.minUnits >= 10) {
				alarmTime.minTens++;
   20610:	10800044 	addi	r2,r2,1
   20614:	80800215 	stw	r2,8(r16)
				alarmTime.minUnits = 0x0;

			}

			if (alarmTime.minTens >= 6) {
   20618:	80800217 	ldw	r2,8(r16)
   2061c:	00c00144 	movi	r3,5
   20620:	1880010e 	bge	r3,r2,20628 <main+0x1e8>
				alarmTime.minTens = 0x0;
   20624:	80000215 	stw	zero,8(r16)

			}

			if (alarmTime.hourUnits >= 10) {
   20628:	80800117 	ldw	r2,4(r16)
   2062c:	00c00244 	movi	r3,9
   20630:	1880040e 	bge	r3,r2,20644 <main+0x204>
				alarmTime.hourTens++;
   20634:	80800017 	ldw	r2,0(r16)
				alarmTime.hourUnits = 0x0;
   20638:	80000115 	stw	zero,4(r16)
				alarmTime.minTens = 0x0;

			}

			if (alarmTime.hourUnits >= 10) {
				alarmTime.hourTens++;
   2063c:	10800044 	addi	r2,r2,1
   20640:	80800015 	stw	r2,0(r16)
				alarmTime.hourUnits = 0x0;

			}

			if (alarmTime.hourTens >= 2 && alarmTime.hourUnits >= 4) {
   20644:	80800017 	ldw	r2,0(r16)
   20648:	90bfcf0e 	bge	r18,r2,20588 <main+0x148>
   2064c:	80800117 	ldw	r2,4(r16)
   20650:	00c000c4 	movi	r3,3
   20654:	18bfcc0e 	bge	r3,r2,20588 <main+0x148>
				alarmTime.hourTens = 0x0;
   20658:	80000015 	stw	zero,0(r16)
				alarmTime.hourUnits = 0x0;
   2065c:	80000115 	stw	zero,4(r16)
   20660:	003fc906 	br	20588 <main+0x148>

			}
			usleep(150000); // To avoid multiples increments

		} else if (*switches == 0x3) {
   20664:	10800017 	ldw	r2,0(r2)
   20668:	00c000c4 	movi	r3,3
   2066c:	10c0181e 	bne	r2,r3,206d0 <main+0x290>
			*leds = 0x3;
   20670:	d0e00417 	ldw	r3,-32752(gp)
			switchingAlarm = true;
			*seconds	= EncodeHexa(0x10000000, 0x10000000);
   20674:	01440034 	movhi	r5,4096
   20678:	d4e00a17 	ldw	r19,-32728(gp)

			}
			usleep(150000); // To avoid multiples increments

		} else if (*switches == 0x3) {
			*leds = 0x3;
   2067c:	18800015 	stw	r2,0(r3)
			switchingAlarm = true;
			*seconds	= EncodeHexa(0x10000000, 0x10000000);
   20680:	2809883a 	mov	r4,r5
			}
			usleep(150000); // To avoid multiples increments

		} else if (*switches == 0x3) {
			*leds = 0x3;
			switchingAlarm = true;
   20684:	d4a01685 	stb	r18,-32678(gp)
			*seconds	= EncodeHexa(0x10000000, 0x10000000);
   20688:	00201e40 	call	201e4 <EncodeHexa>
   2068c:	98800015 	stw	r2,0(r19)
			if (*buttons == 14) {
   20690:	d0a00617 	ldw	r2,-32744(gp)
   20694:	10c00017 	ldw	r3,0(r2)
   20698:	00800384 	movi	r2,14
   2069c:	18bfba1e 	bne	r3,r2,20588 <main+0x148>
				if (alarmStatus) {
   206a0:	d0a01603 	ldbu	r2,-32680(gp)
   206a4:	10000526 	beq	r2,zero,206bc <main+0x27c>
					printf("Off");
   206a8:	01000134 	movhi	r4,4
   206ac:	21000004 	addi	r4,r4,0
   206b0:	00207dc0 	call	207dc <printf>
					alarmStatus = false;
   206b4:	d0201605 	stb	zero,-32680(gp)
   206b8:	003fb306 	br	20588 <main+0x148>
				} else {
					alarmStatus = true;
					printf("On");
   206bc:	01000134 	movhi	r4,4
   206c0:	21000104 	addi	r4,r4,4
			if (*buttons == 14) {
				if (alarmStatus) {
					printf("Off");
					alarmStatus = false;
				} else {
					alarmStatus = true;
   206c4:	d4a01605 	stb	r18,-32680(gp)
					printf("On");
   206c8:	00207dc0 	call	207dc <printf>
   206cc:	003fae06 	br	20588 <main+0x148>
			}
			usleep(150000); // To avoid multiples changes

		} else {

			if (alarmStatus) {
   206d0:	d0a01603 	ldbu	r2,-32680(gp)
   206d4:	10002226 	beq	r2,zero,20760 <main+0x320>
				if (alarmTime.hourTens == actualTime.hourTens
   206d8:	80c00017 	ldw	r3,0(r16)
   206dc:	88800017 	ldw	r2,0(r17)
   206e0:	18801f1e 	bne	r3,r2,20760 <main+0x320>
						&& alarmTime.hourUnits == actualTime.hourUnits
   206e4:	80c00117 	ldw	r3,4(r16)
   206e8:	88800117 	ldw	r2,4(r17)
   206ec:	18801c1e 	bne	r3,r2,20760 <main+0x320>
						&& alarmTime.minTens == actualTime.minTens
   206f0:	80c00217 	ldw	r3,8(r16)
   206f4:	88800217 	ldw	r2,8(r17)
   206f8:	1880191e 	bne	r3,r2,20760 <main+0x320>
						&& alarmTime.minUnits == actualTime.minUnits) {
   206fc:	80c00317 	ldw	r3,12(r16)
   20700:	88800317 	ldw	r2,12(r17)
   20704:	1880161e 	bne	r3,r2,20760 <main+0x320>
					printf("Beep ");
   20708:	01000134 	movhi	r4,4
   2070c:	21000204 	addi	r4,r4,8
   20710:	00207dc0 	call	207dc <printf>
					// Make the sound
					*gpioOut = 0x01;
   20714:	d0a00517 	ldw	r2,-32748(gp)
   20718:	14800015 	stw	r18,0(r2)
					LedsUpdate();
   2071c:	00204200 	call	20420 <LedsUpdate>
					usleep(150000);
   20720:	010000b4 	movhi	r4,2
   20724:	21127c04 	addi	r4,r4,18928
   20728:	00212e40 	call	212e4 <usleep>
					*gpioOut = 0x00;
   2072c:	d0a00517 	ldw	r2,-32748(gp)
   20730:	10000015 	stw	zero,0(r2)
					LedsUpdate();
   20734:	00204200 	call	20420 <LedsUpdate>
					usleep(80000);
   20738:	01000074 	movhi	r4,1
   2073c:	210e2004 	addi	r4,r4,14464
   20740:	00212e40 	call	212e4 <usleep>

					// To disable the alarm
					if (*buttons == 0xE) {
   20744:	d0a00617 	ldw	r2,-32744(gp)
   20748:	10c00017 	ldw	r3,0(r2)
   2074c:	00800384 	movi	r2,14
   20750:	1880031e 	bne	r3,r2,20760 <main+0x320>
						alarmStatus = false;
						*leds = 0;
   20754:	d0a00417 	ldw	r2,-32752(gp)
					LedsUpdate();
					usleep(80000);

					// To disable the alarm
					if (*buttons == 0xE) {
						alarmStatus = false;
   20758:	d0201605 	stb	zero,-32680(gp)
						*leds = 0;
   2075c:	10000015 	stw	zero,0(r2)
					}
				}
			} // Alarm not set
			settingAlarm = false;
			switchingAlarm = false;
			*leds = 0;
   20760:	d0a00417 	ldw	r2,-32752(gp)
						alarmStatus = false;
						*leds = 0;
					}
				}
			} // Alarm not set
			settingAlarm = false;
   20764:	d0201645 	stb	zero,-32679(gp)
			switchingAlarm = false;
   20768:	d0201685 	stb	zero,-32678(gp)
			*leds = 0;
   2076c:	10000015 	stw	zero,0(r2)

		}
		if(*uart==1){
   20770:	d0a00217 	ldw	r2,-32760(gp)
   20774:	10c00017 	ldw	r3,0(r2)
   20778:	d0a00417 	ldw	r2,-32752(gp)
   2077c:	1c80031e 	bne	r3,r18,2078c <main+0x34c>
			*leds = 0xFFFF;
   20780:	00ffffd4 	movui	r3,65535
   20784:	10c00015 	stw	r3,0(r2)
   20788:	00000106 	br	20790 <main+0x350>
		}
		else{
			//printf("uart: %d",*uart);
			*leds = 0x0000;
   2078c:	10000015 	stw	zero,0(r2)
		}
		UpdateTimeDisplays();
   20790:	00203540 	call	20354 <UpdateTimeDisplays>
		usleep(1000);
   20794:	0100fa04 	movi	r4,1000
   20798:	00212e40 	call	212e4 <usleep>
	}
   2079c:	003f4b06 	br	204cc <main+0x8c>

000207a0 <_printf_r>:
   207a0:	defffd04 	addi	sp,sp,-12
   207a4:	dfc00015 	stw	ra,0(sp)
   207a8:	d9800115 	stw	r6,4(sp)
   207ac:	d9c00215 	stw	r7,8(sp)
   207b0:	20c00217 	ldw	r3,8(r4)
   207b4:	018000b4 	movhi	r6,2
   207b8:	31837704 	addi	r6,r6,3548
   207bc:	19800115 	stw	r6,4(r3)
   207c0:	280d883a 	mov	r6,r5
   207c4:	21400217 	ldw	r5,8(r4)
   207c8:	d9c00104 	addi	r7,sp,4
   207cc:	00208940 	call	20894 <___vfprintf_internal_r>
   207d0:	dfc00017 	ldw	ra,0(sp)
   207d4:	dec00304 	addi	sp,sp,12
   207d8:	f800283a 	ret

000207dc <printf>:
   207dc:	defffc04 	addi	sp,sp,-16
   207e0:	dfc00015 	stw	ra,0(sp)
   207e4:	d9400115 	stw	r5,4(sp)
   207e8:	d9800215 	stw	r6,8(sp)
   207ec:	d9c00315 	stw	r7,12(sp)
   207f0:	00800134 	movhi	r2,4
   207f4:	10807204 	addi	r2,r2,456
   207f8:	10800017 	ldw	r2,0(r2)
   207fc:	014000b4 	movhi	r5,2
   20800:	29437704 	addi	r5,r5,3548
   20804:	10c00217 	ldw	r3,8(r2)
   20808:	d9800104 	addi	r6,sp,4
   2080c:	19400115 	stw	r5,4(r3)
   20810:	200b883a 	mov	r5,r4
   20814:	11000217 	ldw	r4,8(r2)
   20818:	0020dc00 	call	20dc0 <__vfprintf_internal>
   2081c:	dfc00017 	ldw	ra,0(sp)
   20820:	dec00404 	addi	sp,sp,16
   20824:	f800283a 	ret

00020828 <print_repeat>:
   20828:	defffb04 	addi	sp,sp,-20
   2082c:	dc800315 	stw	r18,12(sp)
   20830:	dc400215 	stw	r17,8(sp)
   20834:	dc000115 	stw	r16,4(sp)
   20838:	dfc00415 	stw	ra,16(sp)
   2083c:	2025883a 	mov	r18,r4
   20840:	2823883a 	mov	r17,r5
   20844:	d9800005 	stb	r6,0(sp)
   20848:	3821883a 	mov	r16,r7
   2084c:	04000a0e 	bge	zero,r16,20878 <print_repeat+0x50>
   20850:	88800117 	ldw	r2,4(r17)
   20854:	01c00044 	movi	r7,1
   20858:	d80d883a 	mov	r6,sp
   2085c:	880b883a 	mov	r5,r17
   20860:	9009883a 	mov	r4,r18
   20864:	103ee83a 	callr	r2
   20868:	843fffc4 	addi	r16,r16,-1
   2086c:	103ff726 	beq	r2,zero,2084c <print_repeat+0x24>
   20870:	00bfffc4 	movi	r2,-1
   20874:	00000106 	br	2087c <print_repeat+0x54>
   20878:	0005883a 	mov	r2,zero
   2087c:	dfc00417 	ldw	ra,16(sp)
   20880:	dc800317 	ldw	r18,12(sp)
   20884:	dc400217 	ldw	r17,8(sp)
   20888:	dc000117 	ldw	r16,4(sp)
   2088c:	dec00504 	addi	sp,sp,20
   20890:	f800283a 	ret

00020894 <___vfprintf_internal_r>:
   20894:	deffe504 	addi	sp,sp,-108
   20898:	d8c00804 	addi	r3,sp,32
   2089c:	ddc01815 	stw	r23,96(sp)
   208a0:	dd801715 	stw	r22,92(sp)
   208a4:	dd401615 	stw	r21,88(sp)
   208a8:	dd001515 	stw	r20,84(sp)
   208ac:	dcc01415 	stw	r19,80(sp)
   208b0:	dc801315 	stw	r18,76(sp)
   208b4:	dc401215 	stw	r17,72(sp)
   208b8:	dc001115 	stw	r16,68(sp)
   208bc:	dfc01a15 	stw	ra,104(sp)
   208c0:	df001915 	stw	fp,100(sp)
   208c4:	2029883a 	mov	r20,r4
   208c8:	2823883a 	mov	r17,r5
   208cc:	382d883a 	mov	r22,r7
   208d0:	d9800f15 	stw	r6,60(sp)
   208d4:	0021883a 	mov	r16,zero
   208d8:	d8000e15 	stw	zero,56(sp)
   208dc:	d8000a15 	stw	zero,40(sp)
   208e0:	002b883a 	mov	r21,zero
   208e4:	0027883a 	mov	r19,zero
   208e8:	0025883a 	mov	r18,zero
   208ec:	d8000c15 	stw	zero,48(sp)
   208f0:	d8000b15 	stw	zero,44(sp)
   208f4:	002f883a 	mov	r23,zero
   208f8:	d8c00915 	stw	r3,36(sp)
   208fc:	d8c00f17 	ldw	r3,60(sp)
   20900:	19000003 	ldbu	r4,0(r3)
   20904:	20803fcc 	andi	r2,r4,255
   20908:	1080201c 	xori	r2,r2,128
   2090c:	10bfe004 	addi	r2,r2,-128
   20910:	10011e26 	beq	r2,zero,20d8c <___vfprintf_internal_r+0x4f8>
   20914:	00c00044 	movi	r3,1
   20918:	b8c01426 	beq	r23,r3,2096c <___vfprintf_internal_r+0xd8>
   2091c:	1dc00216 	blt	r3,r23,20928 <___vfprintf_internal_r+0x94>
   20920:	b8000626 	beq	r23,zero,2093c <___vfprintf_internal_r+0xa8>
   20924:	00011506 	br	20d7c <___vfprintf_internal_r+0x4e8>
   20928:	01400084 	movi	r5,2
   2092c:	b9401d26 	beq	r23,r5,209a4 <___vfprintf_internal_r+0x110>
   20930:	014000c4 	movi	r5,3
   20934:	b9402b26 	beq	r23,r5,209e4 <___vfprintf_internal_r+0x150>
   20938:	00011006 	br	20d7c <___vfprintf_internal_r+0x4e8>
   2093c:	01400944 	movi	r5,37
   20940:	1140fc26 	beq	r2,r5,20d34 <___vfprintf_internal_r+0x4a0>
   20944:	88800117 	ldw	r2,4(r17)
   20948:	d9000005 	stb	r4,0(sp)
   2094c:	01c00044 	movi	r7,1
   20950:	d80d883a 	mov	r6,sp
   20954:	880b883a 	mov	r5,r17
   20958:	a009883a 	mov	r4,r20
   2095c:	103ee83a 	callr	r2
   20960:	1000d81e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20964:	84000044 	addi	r16,r16,1
   20968:	00010406 	br	20d7c <___vfprintf_internal_r+0x4e8>
   2096c:	01400c04 	movi	r5,48
   20970:	1140fa26 	beq	r2,r5,20d5c <___vfprintf_internal_r+0x4c8>
   20974:	01400944 	movi	r5,37
   20978:	11400a1e 	bne	r2,r5,209a4 <___vfprintf_internal_r+0x110>
   2097c:	d8800005 	stb	r2,0(sp)
   20980:	88800117 	ldw	r2,4(r17)
   20984:	b80f883a 	mov	r7,r23
   20988:	d80d883a 	mov	r6,sp
   2098c:	880b883a 	mov	r5,r17
   20990:	a009883a 	mov	r4,r20
   20994:	103ee83a 	callr	r2
   20998:	1000ca1e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   2099c:	84000044 	addi	r16,r16,1
   209a0:	0000f506 	br	20d78 <___vfprintf_internal_r+0x4e4>
   209a4:	25fff404 	addi	r23,r4,-48
   209a8:	bdc03fcc 	andi	r23,r23,255
   209ac:	00c00244 	movi	r3,9
   209b0:	1dc00936 	bltu	r3,r23,209d8 <___vfprintf_internal_r+0x144>
   209b4:	00bfffc4 	movi	r2,-1
   209b8:	90800426 	beq	r18,r2,209cc <___vfprintf_internal_r+0x138>
   209bc:	01400284 	movi	r5,10
   209c0:	9009883a 	mov	r4,r18
   209c4:	00210bc0 	call	210bc <__mulsi3>
   209c8:	00000106 	br	209d0 <___vfprintf_internal_r+0x13c>
   209cc:	0005883a 	mov	r2,zero
   209d0:	b8a5883a 	add	r18,r23,r2
   209d4:	0000e206 	br	20d60 <___vfprintf_internal_r+0x4cc>
   209d8:	01400b84 	movi	r5,46
   209dc:	1140e426 	beq	r2,r5,20d70 <___vfprintf_internal_r+0x4dc>
   209e0:	05c00084 	movi	r23,2
   209e4:	213ff404 	addi	r4,r4,-48
   209e8:	27003fcc 	andi	fp,r4,255
   209ec:	00c00244 	movi	r3,9
   209f0:	1f000936 	bltu	r3,fp,20a18 <___vfprintf_internal_r+0x184>
   209f4:	00bfffc4 	movi	r2,-1
   209f8:	98800426 	beq	r19,r2,20a0c <___vfprintf_internal_r+0x178>
   209fc:	01400284 	movi	r5,10
   20a00:	9809883a 	mov	r4,r19
   20a04:	00210bc0 	call	210bc <__mulsi3>
   20a08:	00000106 	br	20a10 <___vfprintf_internal_r+0x17c>
   20a0c:	0005883a 	mov	r2,zero
   20a10:	e0a7883a 	add	r19,fp,r2
   20a14:	0000d906 	br	20d7c <___vfprintf_internal_r+0x4e8>
   20a18:	00c01b04 	movi	r3,108
   20a1c:	10c0d226 	beq	r2,r3,20d68 <___vfprintf_internal_r+0x4d4>
   20a20:	013fffc4 	movi	r4,-1
   20a24:	99000226 	beq	r19,r4,20a30 <___vfprintf_internal_r+0x19c>
   20a28:	d8000b15 	stw	zero,44(sp)
   20a2c:	00000106 	br	20a34 <___vfprintf_internal_r+0x1a0>
   20a30:	04c00044 	movi	r19,1
   20a34:	01001a44 	movi	r4,105
   20a38:	11001626 	beq	r2,r4,20a94 <___vfprintf_internal_r+0x200>
   20a3c:	20800916 	blt	r4,r2,20a64 <___vfprintf_internal_r+0x1d0>
   20a40:	010018c4 	movi	r4,99
   20a44:	11008826 	beq	r2,r4,20c68 <___vfprintf_internal_r+0x3d4>
   20a48:	01001904 	movi	r4,100
   20a4c:	11001126 	beq	r2,r4,20a94 <___vfprintf_internal_r+0x200>
   20a50:	01001604 	movi	r4,88
   20a54:	1100c81e 	bne	r2,r4,20d78 <___vfprintf_internal_r+0x4e4>
   20a58:	00c00044 	movi	r3,1
   20a5c:	d8c00e15 	stw	r3,56(sp)
   20a60:	00001506 	br	20ab8 <___vfprintf_internal_r+0x224>
   20a64:	01001cc4 	movi	r4,115
   20a68:	11009826 	beq	r2,r4,20ccc <___vfprintf_internal_r+0x438>
   20a6c:	20800416 	blt	r4,r2,20a80 <___vfprintf_internal_r+0x1ec>
   20a70:	01001bc4 	movi	r4,111
   20a74:	1100c01e 	bne	r2,r4,20d78 <___vfprintf_internal_r+0x4e4>
   20a78:	05400204 	movi	r21,8
   20a7c:	00000f06 	br	20abc <___vfprintf_internal_r+0x228>
   20a80:	01001d44 	movi	r4,117
   20a84:	11000d26 	beq	r2,r4,20abc <___vfprintf_internal_r+0x228>
   20a88:	01001e04 	movi	r4,120
   20a8c:	11000a26 	beq	r2,r4,20ab8 <___vfprintf_internal_r+0x224>
   20a90:	0000b906 	br	20d78 <___vfprintf_internal_r+0x4e4>
   20a94:	d8c00a17 	ldw	r3,40(sp)
   20a98:	b7000104 	addi	fp,r22,4
   20a9c:	18000726 	beq	r3,zero,20abc <___vfprintf_internal_r+0x228>
   20aa0:	df000d15 	stw	fp,52(sp)
   20aa4:	b5c00017 	ldw	r23,0(r22)
   20aa8:	b800080e 	bge	r23,zero,20acc <___vfprintf_internal_r+0x238>
   20aac:	05efc83a 	sub	r23,zero,r23
   20ab0:	02400044 	movi	r9,1
   20ab4:	00000606 	br	20ad0 <___vfprintf_internal_r+0x23c>
   20ab8:	05400404 	movi	r21,16
   20abc:	b0c00104 	addi	r3,r22,4
   20ac0:	d8c00d15 	stw	r3,52(sp)
   20ac4:	b5c00017 	ldw	r23,0(r22)
   20ac8:	d8000a15 	stw	zero,40(sp)
   20acc:	0013883a 	mov	r9,zero
   20ad0:	d839883a 	mov	fp,sp
   20ad4:	b8001726 	beq	r23,zero,20b34 <___vfprintf_internal_r+0x2a0>
   20ad8:	a80b883a 	mov	r5,r21
   20adc:	b809883a 	mov	r4,r23
   20ae0:	da401015 	stw	r9,64(sp)
   20ae4:	00210000 	call	21000 <__udivsi3>
   20ae8:	a80b883a 	mov	r5,r21
   20aec:	1009883a 	mov	r4,r2
   20af0:	102d883a 	mov	r22,r2
   20af4:	00210bc0 	call	210bc <__mulsi3>
   20af8:	b885c83a 	sub	r2,r23,r2
   20afc:	00c00244 	movi	r3,9
   20b00:	da401017 	ldw	r9,64(sp)
   20b04:	18800216 	blt	r3,r2,20b10 <___vfprintf_internal_r+0x27c>
   20b08:	10800c04 	addi	r2,r2,48
   20b0c:	00000506 	br	20b24 <___vfprintf_internal_r+0x290>
   20b10:	d8c00e17 	ldw	r3,56(sp)
   20b14:	18000226 	beq	r3,zero,20b20 <___vfprintf_internal_r+0x28c>
   20b18:	10800dc4 	addi	r2,r2,55
   20b1c:	00000106 	br	20b24 <___vfprintf_internal_r+0x290>
   20b20:	108015c4 	addi	r2,r2,87
   20b24:	e0800005 	stb	r2,0(fp)
   20b28:	b02f883a 	mov	r23,r22
   20b2c:	e7000044 	addi	fp,fp,1
   20b30:	003fe806 	br	20ad4 <___vfprintf_internal_r+0x240>
   20b34:	e6efc83a 	sub	r23,fp,sp
   20b38:	9dc5c83a 	sub	r2,r19,r23
   20b3c:	0080090e 	bge	zero,r2,20b64 <___vfprintf_internal_r+0x2d0>
   20b40:	e085883a 	add	r2,fp,r2
   20b44:	01400c04 	movi	r5,48
   20b48:	d8c00917 	ldw	r3,36(sp)
   20b4c:	e009883a 	mov	r4,fp
   20b50:	e0c0032e 	bgeu	fp,r3,20b60 <___vfprintf_internal_r+0x2cc>
   20b54:	e7000044 	addi	fp,fp,1
   20b58:	21400005 	stb	r5,0(r4)
   20b5c:	e0bffa1e 	bne	fp,r2,20b48 <___vfprintf_internal_r+0x2b4>
   20b60:	e6efc83a 	sub	r23,fp,sp
   20b64:	d8c00b17 	ldw	r3,44(sp)
   20b68:	4dd1883a 	add	r8,r9,r23
   20b6c:	922dc83a 	sub	r22,r18,r8
   20b70:	18001626 	beq	r3,zero,20bcc <___vfprintf_internal_r+0x338>
   20b74:	48000a26 	beq	r9,zero,20ba0 <___vfprintf_internal_r+0x30c>
   20b78:	00800b44 	movi	r2,45
   20b7c:	d8800805 	stb	r2,32(sp)
   20b80:	88800117 	ldw	r2,4(r17)
   20b84:	01c00044 	movi	r7,1
   20b88:	d9800804 	addi	r6,sp,32
   20b8c:	880b883a 	mov	r5,r17
   20b90:	a009883a 	mov	r4,r20
   20b94:	103ee83a 	callr	r2
   20b98:	10004a1e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20b9c:	84000044 	addi	r16,r16,1
   20ba0:	0580070e 	bge	zero,r22,20bc0 <___vfprintf_internal_r+0x32c>
   20ba4:	b00f883a 	mov	r7,r22
   20ba8:	01800c04 	movi	r6,48
   20bac:	880b883a 	mov	r5,r17
   20bb0:	a009883a 	mov	r4,r20
   20bb4:	00208280 	call	20828 <print_repeat>
   20bb8:	1000421e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20bbc:	85a1883a 	add	r16,r16,r22
   20bc0:	e02d883a 	mov	r22,fp
   20bc4:	bf2fc83a 	sub	r23,r23,fp
   20bc8:	00002006 	br	20c4c <___vfprintf_internal_r+0x3b8>
   20bcc:	0580090e 	bge	zero,r22,20bf4 <___vfprintf_internal_r+0x360>
   20bd0:	b00f883a 	mov	r7,r22
   20bd4:	01800804 	movi	r6,32
   20bd8:	880b883a 	mov	r5,r17
   20bdc:	a009883a 	mov	r4,r20
   20be0:	da401015 	stw	r9,64(sp)
   20be4:	00208280 	call	20828 <print_repeat>
   20be8:	da401017 	ldw	r9,64(sp)
   20bec:	1000351e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20bf0:	85a1883a 	add	r16,r16,r22
   20bf4:	483ff226 	beq	r9,zero,20bc0 <___vfprintf_internal_r+0x32c>
   20bf8:	00800b44 	movi	r2,45
   20bfc:	d8800805 	stb	r2,32(sp)
   20c00:	88800117 	ldw	r2,4(r17)
   20c04:	01c00044 	movi	r7,1
   20c08:	d9800804 	addi	r6,sp,32
   20c0c:	880b883a 	mov	r5,r17
   20c10:	a009883a 	mov	r4,r20
   20c14:	103ee83a 	callr	r2
   20c18:	10002a1e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20c1c:	84000044 	addi	r16,r16,1
   20c20:	003fe706 	br	20bc0 <___vfprintf_internal_r+0x32c>
   20c24:	b5bfffc4 	addi	r22,r22,-1
   20c28:	b0800003 	ldbu	r2,0(r22)
   20c2c:	01c00044 	movi	r7,1
   20c30:	d9800804 	addi	r6,sp,32
   20c34:	d8800805 	stb	r2,32(sp)
   20c38:	88800117 	ldw	r2,4(r17)
   20c3c:	880b883a 	mov	r5,r17
   20c40:	a009883a 	mov	r4,r20
   20c44:	103ee83a 	callr	r2
   20c48:	10001e1e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20c4c:	8585c83a 	sub	r2,r16,r22
   20c50:	b5c9883a 	add	r4,r22,r23
   20c54:	e085883a 	add	r2,fp,r2
   20c58:	013ff216 	blt	zero,r4,20c24 <___vfprintf_internal_r+0x390>
   20c5c:	1021883a 	mov	r16,r2
   20c60:	dd800d17 	ldw	r22,52(sp)
   20c64:	00004406 	br	20d78 <___vfprintf_internal_r+0x4e4>
   20c68:	00800044 	movi	r2,1
   20c6c:	1480080e 	bge	r2,r18,20c90 <___vfprintf_internal_r+0x3fc>
   20c70:	95ffffc4 	addi	r23,r18,-1
   20c74:	b80f883a 	mov	r7,r23
   20c78:	01800804 	movi	r6,32
   20c7c:	880b883a 	mov	r5,r17
   20c80:	a009883a 	mov	r4,r20
   20c84:	00208280 	call	20828 <print_repeat>
   20c88:	10000e1e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20c8c:	85e1883a 	add	r16,r16,r23
   20c90:	b0800017 	ldw	r2,0(r22)
   20c94:	01c00044 	movi	r7,1
   20c98:	d80d883a 	mov	r6,sp
   20c9c:	d8800005 	stb	r2,0(sp)
   20ca0:	88800117 	ldw	r2,4(r17)
   20ca4:	880b883a 	mov	r5,r17
   20ca8:	a009883a 	mov	r4,r20
   20cac:	b5c00104 	addi	r23,r22,4
   20cb0:	103ee83a 	callr	r2
   20cb4:	1000031e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20cb8:	84000044 	addi	r16,r16,1
   20cbc:	b82d883a 	mov	r22,r23
   20cc0:	00002d06 	br	20d78 <___vfprintf_internal_r+0x4e4>
   20cc4:	00bfffc4 	movi	r2,-1
   20cc8:	00003106 	br	20d90 <___vfprintf_internal_r+0x4fc>
   20ccc:	b5c00017 	ldw	r23,0(r22)
   20cd0:	b7000104 	addi	fp,r22,4
   20cd4:	b809883a 	mov	r4,r23
   20cd8:	0020e940 	call	20e94 <strlen>
   20cdc:	9091c83a 	sub	r8,r18,r2
   20ce0:	102d883a 	mov	r22,r2
   20ce4:	0200090e 	bge	zero,r8,20d0c <___vfprintf_internal_r+0x478>
   20ce8:	400f883a 	mov	r7,r8
   20cec:	01800804 	movi	r6,32
   20cf0:	880b883a 	mov	r5,r17
   20cf4:	a009883a 	mov	r4,r20
   20cf8:	da001015 	stw	r8,64(sp)
   20cfc:	00208280 	call	20828 <print_repeat>
   20d00:	da001017 	ldw	r8,64(sp)
   20d04:	103fef1e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20d08:	8221883a 	add	r16,r16,r8
   20d0c:	88800117 	ldw	r2,4(r17)
   20d10:	b00f883a 	mov	r7,r22
   20d14:	b80d883a 	mov	r6,r23
   20d18:	880b883a 	mov	r5,r17
   20d1c:	a009883a 	mov	r4,r20
   20d20:	103ee83a 	callr	r2
   20d24:	103fe71e 	bne	r2,zero,20cc4 <___vfprintf_internal_r+0x430>
   20d28:	85a1883a 	add	r16,r16,r22
   20d2c:	e02d883a 	mov	r22,fp
   20d30:	00001106 	br	20d78 <___vfprintf_internal_r+0x4e4>
   20d34:	00c00044 	movi	r3,1
   20d38:	04ffffc4 	movi	r19,-1
   20d3c:	d8000e15 	stw	zero,56(sp)
   20d40:	d8c00a15 	stw	r3,40(sp)
   20d44:	05400284 	movi	r21,10
   20d48:	9825883a 	mov	r18,r19
   20d4c:	d8000c15 	stw	zero,48(sp)
   20d50:	d8000b15 	stw	zero,44(sp)
   20d54:	182f883a 	mov	r23,r3
   20d58:	00000806 	br	20d7c <___vfprintf_internal_r+0x4e8>
   20d5c:	ddc00b15 	stw	r23,44(sp)
   20d60:	05c00084 	movi	r23,2
   20d64:	00000506 	br	20d7c <___vfprintf_internal_r+0x4e8>
   20d68:	00c00044 	movi	r3,1
   20d6c:	d8c00c15 	stw	r3,48(sp)
   20d70:	05c000c4 	movi	r23,3
   20d74:	00000106 	br	20d7c <___vfprintf_internal_r+0x4e8>
   20d78:	002f883a 	mov	r23,zero
   20d7c:	d8c00f17 	ldw	r3,60(sp)
   20d80:	18c00044 	addi	r3,r3,1
   20d84:	d8c00f15 	stw	r3,60(sp)
   20d88:	003edc06 	br	208fc <___vfprintf_internal_r+0x68>
   20d8c:	8005883a 	mov	r2,r16
   20d90:	dfc01a17 	ldw	ra,104(sp)
   20d94:	df001917 	ldw	fp,100(sp)
   20d98:	ddc01817 	ldw	r23,96(sp)
   20d9c:	dd801717 	ldw	r22,92(sp)
   20da0:	dd401617 	ldw	r21,88(sp)
   20da4:	dd001517 	ldw	r20,84(sp)
   20da8:	dcc01417 	ldw	r19,80(sp)
   20dac:	dc801317 	ldw	r18,76(sp)
   20db0:	dc401217 	ldw	r17,72(sp)
   20db4:	dc001117 	ldw	r16,68(sp)
   20db8:	dec01b04 	addi	sp,sp,108
   20dbc:	f800283a 	ret

00020dc0 <__vfprintf_internal>:
   20dc0:	00800134 	movhi	r2,4
   20dc4:	10807204 	addi	r2,r2,456
   20dc8:	300f883a 	mov	r7,r6
   20dcc:	280d883a 	mov	r6,r5
   20dd0:	200b883a 	mov	r5,r4
   20dd4:	11000017 	ldw	r4,0(r2)
   20dd8:	00208941 	jmpi	20894 <___vfprintf_internal_r>

00020ddc <__sfvwrite_small_dev>:
   20ddc:	2880000b 	ldhu	r2,0(r5)
   20de0:	1080020c 	andi	r2,r2,8
   20de4:	10002126 	beq	r2,zero,20e6c <__sfvwrite_small_dev+0x90>
   20de8:	2880008f 	ldh	r2,2(r5)
   20dec:	defffa04 	addi	sp,sp,-24
   20df0:	dc000015 	stw	r16,0(sp)
   20df4:	dfc00515 	stw	ra,20(sp)
   20df8:	dd000415 	stw	r20,16(sp)
   20dfc:	dcc00315 	stw	r19,12(sp)
   20e00:	dc800215 	stw	r18,8(sp)
   20e04:	dc400115 	stw	r17,4(sp)
   20e08:	2821883a 	mov	r16,r5
   20e0c:	10001216 	blt	r2,zero,20e58 <__sfvwrite_small_dev+0x7c>
   20e10:	2027883a 	mov	r19,r4
   20e14:	3025883a 	mov	r18,r6
   20e18:	3823883a 	mov	r17,r7
   20e1c:	05010004 	movi	r20,1024
   20e20:	04400b0e 	bge	zero,r17,20e50 <__sfvwrite_small_dev+0x74>
   20e24:	880f883a 	mov	r7,r17
   20e28:	a440010e 	bge	r20,r17,20e30 <__sfvwrite_small_dev+0x54>
   20e2c:	01c10004 	movi	r7,1024
   20e30:	8140008f 	ldh	r5,2(r16)
   20e34:	900d883a 	mov	r6,r18
   20e38:	9809883a 	mov	r4,r19
   20e3c:	0020eb00 	call	20eb0 <_write_r>
   20e40:	0080050e 	bge	zero,r2,20e58 <__sfvwrite_small_dev+0x7c>
   20e44:	88a3c83a 	sub	r17,r17,r2
   20e48:	90a5883a 	add	r18,r18,r2
   20e4c:	003ff406 	br	20e20 <__sfvwrite_small_dev+0x44>
   20e50:	0005883a 	mov	r2,zero
   20e54:	00000706 	br	20e74 <__sfvwrite_small_dev+0x98>
   20e58:	8080000b 	ldhu	r2,0(r16)
   20e5c:	10801014 	ori	r2,r2,64
   20e60:	8080000d 	sth	r2,0(r16)
   20e64:	00bfffc4 	movi	r2,-1
   20e68:	00000206 	br	20e74 <__sfvwrite_small_dev+0x98>
   20e6c:	00bfffc4 	movi	r2,-1
   20e70:	f800283a 	ret
   20e74:	dfc00517 	ldw	ra,20(sp)
   20e78:	dd000417 	ldw	r20,16(sp)
   20e7c:	dcc00317 	ldw	r19,12(sp)
   20e80:	dc800217 	ldw	r18,8(sp)
   20e84:	dc400117 	ldw	r17,4(sp)
   20e88:	dc000017 	ldw	r16,0(sp)
   20e8c:	dec00604 	addi	sp,sp,24
   20e90:	f800283a 	ret

00020e94 <strlen>:
   20e94:	2005883a 	mov	r2,r4
   20e98:	10c00007 	ldb	r3,0(r2)
   20e9c:	18000226 	beq	r3,zero,20ea8 <strlen+0x14>
   20ea0:	10800044 	addi	r2,r2,1
   20ea4:	003ffc06 	br	20e98 <strlen+0x4>
   20ea8:	1105c83a 	sub	r2,r2,r4
   20eac:	f800283a 	ret

00020eb0 <_write_r>:
   20eb0:	defffd04 	addi	sp,sp,-12
   20eb4:	dc000015 	stw	r16,0(sp)
   20eb8:	04000134 	movhi	r16,4
   20ebc:	dc400115 	stw	r17,4(sp)
   20ec0:	84007d04 	addi	r16,r16,500
   20ec4:	2023883a 	mov	r17,r4
   20ec8:	2809883a 	mov	r4,r5
   20ecc:	300b883a 	mov	r5,r6
   20ed0:	380d883a 	mov	r6,r7
   20ed4:	dfc00215 	stw	ra,8(sp)
   20ed8:	80000015 	stw	zero,0(r16)
   20edc:	00212e80 	call	212e8 <write>
   20ee0:	00ffffc4 	movi	r3,-1
   20ee4:	10c0031e 	bne	r2,r3,20ef4 <_write_r+0x44>
   20ee8:	80c00017 	ldw	r3,0(r16)
   20eec:	18000126 	beq	r3,zero,20ef4 <_write_r+0x44>
   20ef0:	88c00015 	stw	r3,0(r17)
   20ef4:	dfc00217 	ldw	ra,8(sp)
   20ef8:	dc400117 	ldw	r17,4(sp)
   20efc:	dc000017 	ldw	r16,0(sp)
   20f00:	dec00304 	addi	sp,sp,12
   20f04:	f800283a 	ret

00020f08 <__divsi3>:
   20f08:	20001b16 	blt	r4,zero,20f78 <__divsi3+0x70>
   20f0c:	000f883a 	mov	r7,zero
   20f10:	28001616 	blt	r5,zero,20f6c <__divsi3+0x64>
   20f14:	200d883a 	mov	r6,r4
   20f18:	29001a2e 	bgeu	r5,r4,20f84 <__divsi3+0x7c>
   20f1c:	00800804 	movi	r2,32
   20f20:	00c00044 	movi	r3,1
   20f24:	00000106 	br	20f2c <__divsi3+0x24>
   20f28:	10000d26 	beq	r2,zero,20f60 <__divsi3+0x58>
   20f2c:	294b883a 	add	r5,r5,r5
   20f30:	10bfffc4 	addi	r2,r2,-1
   20f34:	18c7883a 	add	r3,r3,r3
   20f38:	293ffb36 	bltu	r5,r4,20f28 <__divsi3+0x20>
   20f3c:	0005883a 	mov	r2,zero
   20f40:	18000726 	beq	r3,zero,20f60 <__divsi3+0x58>
   20f44:	0005883a 	mov	r2,zero
   20f48:	31400236 	bltu	r6,r5,20f54 <__divsi3+0x4c>
   20f4c:	314dc83a 	sub	r6,r6,r5
   20f50:	10c4b03a 	or	r2,r2,r3
   20f54:	1806d07a 	srli	r3,r3,1
   20f58:	280ad07a 	srli	r5,r5,1
   20f5c:	183ffa1e 	bne	r3,zero,20f48 <__divsi3+0x40>
   20f60:	38000126 	beq	r7,zero,20f68 <__divsi3+0x60>
   20f64:	0085c83a 	sub	r2,zero,r2
   20f68:	f800283a 	ret
   20f6c:	014bc83a 	sub	r5,zero,r5
   20f70:	39c0005c 	xori	r7,r7,1
   20f74:	003fe706 	br	20f14 <__divsi3+0xc>
   20f78:	0109c83a 	sub	r4,zero,r4
   20f7c:	01c00044 	movi	r7,1
   20f80:	003fe306 	br	20f10 <__divsi3+0x8>
   20f84:	00c00044 	movi	r3,1
   20f88:	003fee06 	br	20f44 <__divsi3+0x3c>

00020f8c <__modsi3>:
   20f8c:	20001716 	blt	r4,zero,20fec <__modsi3+0x60>
   20f90:	000f883a 	mov	r7,zero
   20f94:	2005883a 	mov	r2,r4
   20f98:	28001216 	blt	r5,zero,20fe4 <__modsi3+0x58>
   20f9c:	2900162e 	bgeu	r5,r4,20ff8 <__modsi3+0x6c>
   20fa0:	01800804 	movi	r6,32
   20fa4:	00c00044 	movi	r3,1
   20fa8:	00000106 	br	20fb0 <__modsi3+0x24>
   20fac:	30000a26 	beq	r6,zero,20fd8 <__modsi3+0x4c>
   20fb0:	294b883a 	add	r5,r5,r5
   20fb4:	31bfffc4 	addi	r6,r6,-1
   20fb8:	18c7883a 	add	r3,r3,r3
   20fbc:	293ffb36 	bltu	r5,r4,20fac <__modsi3+0x20>
   20fc0:	18000526 	beq	r3,zero,20fd8 <__modsi3+0x4c>
   20fc4:	1806d07a 	srli	r3,r3,1
   20fc8:	11400136 	bltu	r2,r5,20fd0 <__modsi3+0x44>
   20fcc:	1145c83a 	sub	r2,r2,r5
   20fd0:	280ad07a 	srli	r5,r5,1
   20fd4:	183ffb1e 	bne	r3,zero,20fc4 <__modsi3+0x38>
   20fd8:	38000126 	beq	r7,zero,20fe0 <__modsi3+0x54>
   20fdc:	0085c83a 	sub	r2,zero,r2
   20fe0:	f800283a 	ret
   20fe4:	014bc83a 	sub	r5,zero,r5
   20fe8:	003fec06 	br	20f9c <__modsi3+0x10>
   20fec:	0109c83a 	sub	r4,zero,r4
   20ff0:	01c00044 	movi	r7,1
   20ff4:	003fe706 	br	20f94 <__modsi3+0x8>
   20ff8:	00c00044 	movi	r3,1
   20ffc:	003ff106 	br	20fc4 <__modsi3+0x38>

00021000 <__udivsi3>:
   21000:	200d883a 	mov	r6,r4
   21004:	2900152e 	bgeu	r5,r4,2105c <__udivsi3+0x5c>
   21008:	28001416 	blt	r5,zero,2105c <__udivsi3+0x5c>
   2100c:	00800804 	movi	r2,32
   21010:	00c00044 	movi	r3,1
   21014:	00000206 	br	21020 <__udivsi3+0x20>
   21018:	10000e26 	beq	r2,zero,21054 <__udivsi3+0x54>
   2101c:	28000516 	blt	r5,zero,21034 <__udivsi3+0x34>
   21020:	294b883a 	add	r5,r5,r5
   21024:	10bfffc4 	addi	r2,r2,-1
   21028:	18c7883a 	add	r3,r3,r3
   2102c:	293ffa36 	bltu	r5,r4,21018 <__udivsi3+0x18>
   21030:	18000826 	beq	r3,zero,21054 <__udivsi3+0x54>
   21034:	0005883a 	mov	r2,zero
   21038:	31400236 	bltu	r6,r5,21044 <__udivsi3+0x44>
   2103c:	314dc83a 	sub	r6,r6,r5
   21040:	10c4b03a 	or	r2,r2,r3
   21044:	1806d07a 	srli	r3,r3,1
   21048:	280ad07a 	srli	r5,r5,1
   2104c:	183ffa1e 	bne	r3,zero,21038 <__udivsi3+0x38>
   21050:	f800283a 	ret
   21054:	0005883a 	mov	r2,zero
   21058:	f800283a 	ret
   2105c:	00c00044 	movi	r3,1
   21060:	003ff406 	br	21034 <__udivsi3+0x34>

00021064 <__umodsi3>:
   21064:	2005883a 	mov	r2,r4
   21068:	2900122e 	bgeu	r5,r4,210b4 <__umodsi3+0x50>
   2106c:	28001116 	blt	r5,zero,210b4 <__umodsi3+0x50>
   21070:	01800804 	movi	r6,32
   21074:	00c00044 	movi	r3,1
   21078:	00000206 	br	21084 <__umodsi3+0x20>
   2107c:	30000c26 	beq	r6,zero,210b0 <__umodsi3+0x4c>
   21080:	28000516 	blt	r5,zero,21098 <__umodsi3+0x34>
   21084:	294b883a 	add	r5,r5,r5
   21088:	31bfffc4 	addi	r6,r6,-1
   2108c:	18c7883a 	add	r3,r3,r3
   21090:	293ffa36 	bltu	r5,r4,2107c <__umodsi3+0x18>
   21094:	18000626 	beq	r3,zero,210b0 <__umodsi3+0x4c>
   21098:	1806d07a 	srli	r3,r3,1
   2109c:	11400136 	bltu	r2,r5,210a4 <__umodsi3+0x40>
   210a0:	1145c83a 	sub	r2,r2,r5
   210a4:	280ad07a 	srli	r5,r5,1
   210a8:	183ffb1e 	bne	r3,zero,21098 <__umodsi3+0x34>
   210ac:	f800283a 	ret
   210b0:	f800283a 	ret
   210b4:	00c00044 	movi	r3,1
   210b8:	003ff706 	br	21098 <__umodsi3+0x34>

000210bc <__mulsi3>:
   210bc:	0005883a 	mov	r2,zero
   210c0:	20000726 	beq	r4,zero,210e0 <__mulsi3+0x24>
   210c4:	20c0004c 	andi	r3,r4,1
   210c8:	2008d07a 	srli	r4,r4,1
   210cc:	18000126 	beq	r3,zero,210d4 <__mulsi3+0x18>
   210d0:	1145883a 	add	r2,r2,r5
   210d4:	294b883a 	add	r5,r5,r5
   210d8:	203ffa1e 	bne	r4,zero,210c4 <__mulsi3+0x8>
   210dc:	f800283a 	ret
   210e0:	f800283a 	ret

000210e4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   210e4:	00211701 	jmpi	21170 <alt_iic_isr_register>

000210e8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   210e8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   210ec:	00bfff84 	movi	r2,-2
   210f0:	2084703a 	and	r2,r4,r2
   210f4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   210f8:	00c00044 	movi	r3,1
   210fc:	d0a01817 	ldw	r2,-32672(gp)
   21100:	194a983a 	sll	r5,r3,r5
   21104:	288ab03a 	or	r5,r5,r2
   21108:	d1601815 	stw	r5,-32672(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2110c:	d0a01817 	ldw	r2,-32672(gp)
   21110:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21114:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   21118:	0005883a 	mov	r2,zero
   2111c:	f800283a 	ret

00021120 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21120:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21124:	00bfff84 	movi	r2,-2
   21128:	2084703a 	and	r2,r4,r2
   2112c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   21130:	00ffff84 	movi	r3,-2
   21134:	d0a01817 	ldw	r2,-32672(gp)
   21138:	194a183a 	rol	r5,r3,r5
   2113c:	288a703a 	and	r5,r5,r2
   21140:	d1601815 	stw	r5,-32672(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21144:	d0a01817 	ldw	r2,-32672(gp)
   21148:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2114c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   21150:	0005883a 	mov	r2,zero
   21154:	f800283a 	ret

00021158 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   21158:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2115c:	00800044 	movi	r2,1
   21160:	1144983a 	sll	r2,r2,r5
   21164:	10c4703a 	and	r2,r2,r3
}
   21168:	1004c03a 	cmpne	r2,r2,zero
   2116c:	f800283a 	ret

00021170 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21170:	00c007c4 	movi	r3,31
   21174:	19401616 	blt	r3,r5,211d0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21178:	defffe04 	addi	sp,sp,-8
   2117c:	dfc00115 	stw	ra,4(sp)
   21180:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21184:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21188:	00ffff84 	movi	r3,-2
   2118c:	80c6703a 	and	r3,r16,r3
   21190:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   21194:	280490fa 	slli	r2,r5,3
   21198:	00c00134 	movhi	r3,4
   2119c:	18c09104 	addi	r3,r3,580
   211a0:	1885883a 	add	r2,r3,r2
   211a4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   211a8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   211ac:	30000226 	beq	r6,zero,211b8 <alt_iic_isr_register+0x48>
   211b0:	00210e80 	call	210e8 <alt_ic_irq_enable>
   211b4:	00000106 	br	211bc <alt_iic_isr_register+0x4c>
   211b8:	00211200 	call	21120 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   211bc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   211c0:	dfc00117 	ldw	ra,4(sp)
   211c4:	dc000017 	ldw	r16,0(sp)
   211c8:	dec00204 	addi	sp,sp,8
   211cc:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   211d0:	00bffa84 	movi	r2,-22
   211d4:	f800283a 	ret

000211d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   211d8:	deffff04 	addi	sp,sp,-4
   211dc:	01000134 	movhi	r4,4
   211e0:	014000b4 	movhi	r5,2
   211e4:	dfc00015 	stw	ra,0(sp)
   211e8:	21000d04 	addi	r4,r4,52
   211ec:	2945d904 	addi	r5,r5,5988

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   211f0:	2140061e 	bne	r4,r5,2120c <alt_load+0x34>
   211f4:	010000b4 	movhi	r4,2
   211f8:	014000b4 	movhi	r5,2
   211fc:	21000804 	addi	r4,r4,32
   21200:	29400804 	addi	r5,r5,32
   21204:	2140121e 	bne	r4,r5,21250 <alt_load+0x78>
   21208:	00000b06 	br	21238 <alt_load+0x60>
   2120c:	00c00134 	movhi	r3,4
   21210:	18c07b04 	addi	r3,r3,492
   21214:	1907c83a 	sub	r3,r3,r4
   21218:	0005883a 	mov	r2,zero
  {
    while( to != end )
   2121c:	10fff526 	beq	r2,r3,211f4 <alt_load+0x1c>
    {
      *to++ = *from++;
   21220:	114f883a 	add	r7,r2,r5
   21224:	39c00017 	ldw	r7,0(r7)
   21228:	110d883a 	add	r6,r2,r4
   2122c:	10800104 	addi	r2,r2,4
   21230:	31c00015 	stw	r7,0(r6)
   21234:	003ff906 	br	2121c <alt_load+0x44>
   21238:	01000134 	movhi	r4,4
   2123c:	014000b4 	movhi	r5,2
   21240:	21000004 	addi	r4,r4,0
   21244:	2945cc04 	addi	r5,r5,5936

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   21248:	2140101e 	bne	r4,r5,2128c <alt_load+0xb4>
   2124c:	00000b06 	br	2127c <alt_load+0xa4>
   21250:	00c000b4 	movhi	r3,2
   21254:	18c06004 	addi	r3,r3,384
   21258:	1907c83a 	sub	r3,r3,r4
   2125c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   21260:	10fff526 	beq	r2,r3,21238 <alt_load+0x60>
    {
      *to++ = *from++;
   21264:	114f883a 	add	r7,r2,r5
   21268:	39c00017 	ldw	r7,0(r7)
   2126c:	110d883a 	add	r6,r2,r4
   21270:	10800104 	addi	r2,r2,4
   21274:	31c00015 	stw	r7,0(r6)
   21278:	003ff906 	br	21260 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2127c:	00215940 	call	21594 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   21280:	dfc00017 	ldw	ra,0(sp)
   21284:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   21288:	00216801 	jmpi	21680 <alt_icache_flush_all>
   2128c:	00c00134 	movhi	r3,4
   21290:	18c00d04 	addi	r3,r3,52
   21294:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   21298:	0005883a 	mov	r2,zero
  {
    while( to != end )
   2129c:	18bff726 	beq	r3,r2,2127c <alt_load+0xa4>
    {
      *to++ = *from++;
   212a0:	114f883a 	add	r7,r2,r5
   212a4:	39c00017 	ldw	r7,0(r7)
   212a8:	110d883a 	add	r6,r2,r4
   212ac:	10800104 	addi	r2,r2,4
   212b0:	31c00015 	stw	r7,0(r6)
   212b4:	003ff906 	br	2129c <alt_load+0xc4>

000212b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   212b8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   212bc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   212c0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   212c4:	00213480 	call	21348 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   212c8:	00213680 	call	21368 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   212cc:	d1a01917 	ldw	r6,-32668(gp)
   212d0:	d1601a17 	ldw	r5,-32664(gp)
   212d4:	d1201b17 	ldw	r4,-32660(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   212d8:	dfc00017 	ldw	ra,0(sp)
   212dc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   212e0:	00204401 	jmpi	20440 <main>

000212e4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   212e4:	002150c1 	jmpi	2150c <alt_busy_sleep>

000212e8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   212e8:	00800044 	movi	r2,1
   212ec:	20800226 	beq	r4,r2,212f8 <write+0x10>
   212f0:	00800084 	movi	r2,2
   212f4:	2080041e 	bne	r4,r2,21308 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   212f8:	01000134 	movhi	r4,4
   212fc:	000f883a 	mov	r7,zero
   21300:	21007404 	addi	r4,r4,464
   21304:	00213781 	jmpi	21378 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   21308:	d0a01417 	ldw	r2,-32688(gp)
   2130c:	10000926 	beq	r2,zero,21334 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   21310:	deffff04 	addi	sp,sp,-4
   21314:	dfc00015 	stw	ra,0(sp)
   21318:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   2131c:	00c01444 	movi	r3,81
   21320:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   21324:	00bfffc4 	movi	r2,-1
   21328:	dfc00017 	ldw	ra,0(sp)
   2132c:	dec00104 	addi	sp,sp,4
   21330:	f800283a 	ret
   21334:	d0a01704 	addi	r2,gp,-32676
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   21338:	00c01444 	movi	r3,81
   2133c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   21340:	00bfffc4 	movi	r2,-1
   21344:	f800283a 	ret

00021348 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21348:	deffff04 	addi	sp,sp,-4
   2134c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
   21350:	00216f80 	call	216f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21354:	00800044 	movi	r2,1
   21358:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2135c:	dfc00017 	ldw	ra,0(sp)
   21360:	dec00104 	addi	sp,sp,4
   21364:	f800283a 	ret

00021368 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   21368:	01000134 	movhi	r4,4
   2136c:	d1601004 	addi	r5,gp,-32704
   21370:	21004504 	addi	r4,r4,276
   21374:	00215a01 	jmpi	215a0 <alt_dev_llist_insert>

00021378 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   21378:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2137c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   21380:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21384:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   21388:	2980072e 	bgeu	r5,r6,213a8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   2138c:	38c00037 	ldwio	r3,0(r7)
   21390:	18ffffec 	andhi	r3,r3,65535
   21394:	183ffc26 	beq	r3,zero,21388 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   21398:	28c00007 	ldb	r3,0(r5)
   2139c:	20c00035 	stwio	r3,0(r4)
   213a0:	29400044 	addi	r5,r5,1
   213a4:	003ff806 	br	21388 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
   213a8:	f800283a 	ret

000213ac <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   213ac:	20800a17 	ldw	r2,40(r4)
   213b0:	10800104 	addi	r2,r2,4
   213b4:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   213b8:	18c00054 	ori	r3,r3,1
   213bc:	10c00035 	stwio	r3,0(r2)
   213c0:	f800283a 	ret

000213c4 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   213c4:	20800a17 	ldw	r2,40(r4)
   213c8:	10800104 	addi	r2,r2,4
   213cc:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   213d0:	00ffff84 	movi	r3,-2
   213d4:	20c6703a 	and	r3,r4,r3
   213d8:	10c00035 	stwio	r3,0(r2)
   213dc:	f800283a 	ret

000213e0 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   213e0:	20800a17 	ldw	r2,40(r4)
   213e4:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
   213e8:	10bfffcc 	andi	r2,r2,65535
   213ec:	f800283a 	ret

000213f0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   213f0:	20800a17 	ldw	r2,40(r4)
   213f4:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
   213f8:	1004d43a 	srli	r2,r2,16
   213fc:	f800283a 	ret

00021400 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
   21400:	200495ba 	slli	r2,r4,22
}
   21404:	1005d7fa 	srai	r2,r2,31
   21408:	f800283a 	ret

0002140c <alt_up_rs232_write_data>:
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   2140c:	20800a17 	ldw	r2,40(r4)
   21410:	29403fcc 	andi	r5,r5,255
   21414:	11400035 	stwio	r5,0(r2)
	return 0;
}
   21418:	0005883a 	mov	r2,zero
   2141c:	f800283a 	ret

00021420 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   21420:	20800a17 	ldw	r2,40(r4)
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   21424:	defffd04 	addi	sp,sp,-12
   21428:	dc400115 	stw	r17,4(sp)
   2142c:	3023883a 	mov	r17,r6
   21430:	dfc00215 	stw	ra,8(sp)
   21434:	dc000015 	stw	r16,0(sp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   21438:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   2143c:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   21440:	8009883a 	mov	r4,r16
   21444:	00214000 	call	21400 <alt_up_rs232_check_parity>
   21448:	88800005 	stb	r2,0(r17)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   2144c:	80a0000c 	andi	r2,r16,32768
   21450:	1004d3fa 	srli	r2,r2,15
}
   21454:	10bfffc4 	addi	r2,r2,-1
   21458:	dfc00217 	ldw	ra,8(sp)
   2145c:	dc400117 	ldw	r17,4(sp)
   21460:	dc000017 	ldw	r16,0(sp)
   21464:	dec00304 	addi	sp,sp,12
   21468:	f800283a 	ret

0002146c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   2146c:	defff904 	addi	sp,sp,-28
   21470:	dcc00415 	stw	r19,16(sp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   21474:	24c00017 	ldw	r19,0(r4)
	*parity_error = alt_up_rs232_check_parity(data_reg);
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   21478:	dc800315 	stw	r18,12(sp)
   2147c:	dc000115 	stw	r16,4(sp)
   21480:	dfc00615 	stw	ra,24(sp)
   21484:	dd000515 	stw	r20,20(sp)
   21488:	dc400215 	stw	r17,8(sp)
   2148c:	2821883a 	mov	r16,r5
   21490:	29a5883a 	add	r18,r5,r6
   21494:	2c23c83a 	sub	r17,r5,r16
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   21498:	2c800726 	beq	r5,r18,214b8 <alt_up_rs232_read_fd+0x4c>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   2149c:	d80d883a 	mov	r6,sp
   214a0:	9809883a 	mov	r4,r19
   214a4:	2d000044 	addi	r20,r5,1
   214a8:	00214200 	call	21420 <alt_up_rs232_read_data>
   214ac:	1000021e 	bne	r2,zero,214b8 <alt_up_rs232_read_fd+0x4c>
   214b0:	a00b883a 	mov	r5,r20
   214b4:	003ff706 	br	21494 <alt_up_rs232_read_fd+0x28>
			count++;
		else
			break;
	}
	return count;
}
   214b8:	8805883a 	mov	r2,r17
   214bc:	dfc00617 	ldw	ra,24(sp)
   214c0:	dd000517 	ldw	r20,20(sp)
   214c4:	dcc00417 	ldw	r19,16(sp)
   214c8:	dc800317 	ldw	r18,12(sp)
   214cc:	dc400217 	ldw	r17,8(sp)
   214d0:	dc000117 	ldw	r16,4(sp)
   214d4:	dec00704 	addi	sp,sp,28
   214d8:	f800283a 	ret

000214dc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   214dc:	21000017 	ldw	r4,0(r4)
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   214e0:	3005883a 	mov	r2,r6
   214e4:	2987883a 	add	r3,r5,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   214e8:	28c00526 	beq	r5,r3,21500 <alt_up_rs232_write_fd+0x24>
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   214ec:	29c00003 	ldbu	r7,0(r5)
   214f0:	21800a17 	ldw	r6,40(r4)
   214f4:	31c00035 	stwio	r7,0(r6)
	while(len--)
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
		{
			count++;
			ptr++;
   214f8:	29400044 	addi	r5,r5,1
   214fc:	003ffa06 	br	214e8 <alt_up_rs232_write_fd+0xc>
		}
		else
			break;
	}
	return count;
}
   21500:	f800283a 	ret

00021504 <alt_up_rs232_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   21504:	d1601004 	addi	r5,gp,-32704
   21508:	002160c1 	jmpi	2160c <alt_find_dev>

0002150c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2150c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   21510:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   21514:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   21518:	dc000015 	stw	r16,0(sp)
   2151c:	dfc00115 	stw	ra,4(sp)
   21520:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   21524:	00210000 	call	21000 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   21528:	10001026 	beq	r2,zero,2156c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2152c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   21530:	013999b4 	movhi	r4,58982
   21534:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   21538:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2153c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   21540:	297fffc4 	addi	r5,r5,-1
   21544:	283ffe1e 	bne	r5,zero,21540 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   21548:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2154c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   21550:	18bffb16 	blt	r3,r2,21540 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   21554:	01400144 	movi	r5,5
   21558:	8009883a 	mov	r4,r16
   2155c:	00210bc0 	call	210bc <__mulsi3>
   21560:	10bfffc4 	addi	r2,r2,-1
   21564:	103ffe1e 	bne	r2,zero,21560 <alt_busy_sleep+0x54>
   21568:	00000506 	br	21580 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   2156c:	01400144 	movi	r5,5
   21570:	8009883a 	mov	r4,r16
   21574:	00210bc0 	call	210bc <__mulsi3>
   21578:	10bfffc4 	addi	r2,r2,-1
   2157c:	00bffe16 	blt	zero,r2,21578 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   21580:	0005883a 	mov	r2,zero
   21584:	dfc00117 	ldw	ra,4(sp)
   21588:	dc000017 	ldw	r16,0(sp)
   2158c:	dec00204 	addi	sp,sp,8
   21590:	f800283a 	ret

00021594 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21594:	f800283a 	ret

00021598 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   21598:	3005883a 	mov	r2,r6
   2159c:	f800283a 	ret

000215a0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   215a0:	20000226 	beq	r4,zero,215ac <alt_dev_llist_insert+0xc>
   215a4:	20800217 	ldw	r2,8(r4)
   215a8:	1000101e 	bne	r2,zero,215ec <alt_dev_llist_insert+0x4c>
   215ac:	d0a01417 	ldw	r2,-32688(gp)
   215b0:	10000926 	beq	r2,zero,215d8 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   215b4:	deffff04 	addi	sp,sp,-4
   215b8:	dfc00015 	stw	ra,0(sp)
   215bc:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   215c0:	00c00584 	movi	r3,22
   215c4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   215c8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   215cc:	dfc00017 	ldw	ra,0(sp)
   215d0:	dec00104 	addi	sp,sp,4
   215d4:	f800283a 	ret
   215d8:	d0a01704 	addi	r2,gp,-32676
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   215dc:	00c00584 	movi	r3,22
   215e0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   215e4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   215e8:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   215ec:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   215f0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   215f4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   215f8:	28800017 	ldw	r2,0(r5)
   215fc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   21600:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   21604:	0005883a 	mov	r2,zero
   21608:	f800283a 	ret

0002160c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2160c:	defffb04 	addi	sp,sp,-20
   21610:	dcc00315 	stw	r19,12(sp)
   21614:	dc800215 	stw	r18,8(sp)
   21618:	dc400115 	stw	r17,4(sp)
   2161c:	dc000015 	stw	r16,0(sp)
   21620:	dfc00415 	stw	ra,16(sp)
   21624:	2027883a 	mov	r19,r4
   21628:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   2162c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   21630:	0020e940 	call	20e94 <strlen>
   21634:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21638:	84400726 	beq	r16,r17,21658 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2163c:	81000217 	ldw	r4,8(r16)
   21640:	900d883a 	mov	r6,r18
   21644:	980b883a 	mov	r5,r19
   21648:	00217000 	call	21700 <memcmp>
   2164c:	10000426 	beq	r2,zero,21660 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   21650:	84000017 	ldw	r16,0(r16)
   21654:	003ff806 	br	21638 <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
   21658:	0005883a 	mov	r2,zero
   2165c:	00000106 	br	21664 <alt_find_dev+0x58>
   21660:	8005883a 	mov	r2,r16
}
   21664:	dfc00417 	ldw	ra,16(sp)
   21668:	dcc00317 	ldw	r19,12(sp)
   2166c:	dc800217 	ldw	r18,8(sp)
   21670:	dc400117 	ldw	r17,4(sp)
   21674:	dc000017 	ldw	r16,0(sp)
   21678:	dec00504 	addi	sp,sp,20
   2167c:	f800283a 	ret

00021680 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21680:	f800283a 	ret

00021684 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   21684:	213ffe84 	addi	r4,r4,-6
   21688:	008003c4 	movi	r2,15
   2168c:	11001636 	bltu	r2,r4,216e8 <alt_exception_cause_generated_bad_addr+0x64>
   21690:	200890ba 	slli	r4,r4,2
   21694:	008000b4 	movhi	r2,2
   21698:	1085aa04 	addi	r2,r2,5800
   2169c:	2089883a 	add	r4,r4,r2
   216a0:	20800017 	ldw	r2,0(r4)
   216a4:	1000683a 	jmp	r2
   216a8:	000216f0 	cmpltui	zero,zero,2139
   216ac:	000216f0 	cmpltui	zero,zero,2139
   216b0:	000216e8 	cmpgeui	zero,zero,2139
   216b4:	000216e8 	cmpgeui	zero,zero,2139
   216b8:	000216e8 	cmpgeui	zero,zero,2139
   216bc:	000216f0 	cmpltui	zero,zero,2139
   216c0:	000216e8 	cmpgeui	zero,zero,2139
   216c4:	000216e8 	cmpgeui	zero,zero,2139
   216c8:	000216f0 	cmpltui	zero,zero,2139
   216cc:	000216f0 	cmpltui	zero,zero,2139
   216d0:	000216e8 	cmpgeui	zero,zero,2139
   216d4:	000216f0 	cmpltui	zero,zero,2139
   216d8:	000216e8 	cmpgeui	zero,zero,2139
   216dc:	000216e8 	cmpgeui	zero,zero,2139
   216e0:	000216e8 	cmpgeui	zero,zero,2139
   216e4:	000216f0 	cmpltui	zero,zero,2139
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   216e8:	0005883a 	mov	r2,zero
   216ec:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   216f0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   216f4:	f800283a 	ret

000216f8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   216f8:	000170fa 	wrctl	ienable,zero
   216fc:	f800283a 	ret

00021700 <memcmp>:
   21700:	218d883a 	add	r6,r4,r6
   21704:	21800826 	beq	r4,r6,21728 <memcmp+0x28>
   21708:	20800003 	ldbu	r2,0(r4)
   2170c:	28c00003 	ldbu	r3,0(r5)
   21710:	10c00226 	beq	r2,r3,2171c <memcmp+0x1c>
   21714:	10c5c83a 	sub	r2,r2,r3
   21718:	f800283a 	ret
   2171c:	21000044 	addi	r4,r4,1
   21720:	29400044 	addi	r5,r5,1
   21724:	003ff706 	br	21704 <memcmp+0x4>
   21728:	0005883a 	mov	r2,zero
   2172c:	f800283a 	ret
